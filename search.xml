<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>通信协议</title>
      <link href="/2023/11/02/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/"/>
      <url>/2023/11/02/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="一、通信基础知识"><a href="#一、通信基础知识" class="headerlink" title="一、通信基础知识"></a>一、通信基础知识</h1><h2 id="1-异步通信和同步通信："><a href="#1-异步通信和同步通信：" class="headerlink" title="1.异步通信和同步通信："></a>1.异步通信和同步通信：</h2><ul><li><strong>异步通信：</strong>在发送字符时，所发送的字符之间的时间间隔可以是任意的。当然，接收端必须时刻做好接收的准备。发送端可以在任意时刻开始发送字符，因此必须在每一个字符的开始和结束的地方加上标志，即加上开始位和停止位，以便使接收端能够正确地将每一个字符接收下来。<strong>接收方并不知道数据什么时候会到达，收发双方可以有各自自己的时钟</strong></li><li><strong>同步通信：</strong>发送端在发送串行数据的同时，提供一个时钟信号，并按照一定的约定（例如：在时钟信号的上升沿的时候，将数据发送出去）发送数据，接收端根据发送端提供的时钟信号，以及大家的约定，接收数据。<strong>同步通信中双方使用频率一致的时钟</strong></li></ul><h2 id="2-串行通信与并行通信"><a href="#2-串行通信与并行通信" class="headerlink" title="2.串行通信与并行通信"></a>2.串行通信与并行通信</h2><ul><li><strong>并行通信：</strong>指数据的各位 同时进⾏传送，其特点是传输速度快，但当传输距离较远、位数⼜多时，导致了通信线路复杂且成本提⾼。</li><li><strong>串行通信：</strong>指数据⼀位位地顺序传送，其特点是通信线路简单，只要⼀对传输线就可以实现双向通信，并可以利⽤电话线， 从⽽⼤⼤降低了成本，特别适⽤于远距离通信，但传送速度较慢</li></ul><h2 id="3-全双工、半双工、单工"><a href="#3-全双工、半双工、单工" class="headerlink" title="3.全双工、半双工、单工"></a>3.全双工、半双工、单工</h2><ul><li><strong>全双工：</strong>允许二台设备间<strong>同时</strong>进行双向数据传输</li><li><strong>半双工：</strong>允许二台设备之间的双向数据传输，但<strong>不能同时</strong>进行</li><li><strong>单工：</strong>指数据传输只支持数据在一个方向上传输</li></ul><h1 id="二、串口"><a href="#二、串口" class="headerlink" title="二、串口"></a>二、串口</h1><h2 id="1-串口简介与应用"><a href="#1-串口简介与应用" class="headerlink" title="1.串口简介与应用"></a>1.串口简介与应用</h2><h3 id="1-1简介"><a href="#1-1简介" class="headerlink" title="1.1简介"></a>1.1简介</h3><p>​通用异步收发器 UART（Universal Asynchronous Receiver&#x2F;Transmitter)，是一种<strong>串行、异步、全双工</strong>的通信协议，将所需传输的数据一位接一位地传输，在UART通讯协议中信号线上的状态位高电平代表’1’，低电平代表’0’。其特点是通信线路简单，只要一对传输线就可以实现双向通信，大大降低了成本，但传送速度较慢。</p><h3 id="1-2应用"><a href="#1-2应用" class="headerlink" title="1.2应用"></a>1.2应用</h3><ul><li>打印调试信息</li><li>外接各种模块：GPS、蓝牙、、、、</li></ul><h2 id="2-使用UART设置项"><a href="#2-使用UART设置项" class="headerlink" title="2.使用UART设置项"></a>2.使用UART设置项</h2><ul><li>波特率：传输每一位需要的时间：t &#x3D; 1&#x2F;115200</li><li>格式：数据位、停止位、校验位、流量控制</li><li><img src="/2023/11/02/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/image-20231015160815240.png" alt="image-20231015160815240"></li></ul><h2 id="3-电平形式"><a href="#3-电平形式" class="headerlink" title="3.电平形式"></a>3.电平形式</h2><ul><li><strong>TTL&#x2F;CMOS逻辑电平：</strong>0 ~ +5v,  逻辑“0”：&lt;0.8v, 逻辑“1”：&gt;2v。</li><li><strong>RS-232电平：</strong>-12v ~ +12v,逻辑“0”：&lt;-3v, 逻辑“1”：&gt;3v。采取不平衡传输方式，即所谓<strong>单端通讯</strong>，只允许<strong>一对一通信</strong></li><li><strong>RS-485电平：</strong>逻辑“0”：压差&lt;-2v, 逻辑“1”：压差&gt;2v。采用平衡传输，即<strong>差分传输</strong>，允许连接<strong>多达128个</strong>收发器</li></ul><h2 id="4-串口结构图"><a href="#4-串口结构图" class="headerlink" title="4.串口结构图"></a>4.串口结构图</h2><p><img src="/2023/11/02/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/image-20231015161453003.png" alt="image-20231015161453003"></p><blockquote><p>串行发送：逐位发送</p><p>发送步骤：开发板中内存中的数据——FIFO—–移位寄存器——逐位发送出去</p><p>如何判断发送完没有？：中断  or  轮询</p></blockquote><h2 id="5-串口编程-STM32F103"><a href="#5-串口编程-STM32F103" class="headerlink" title="5.串口编程_STM32F103"></a>5.串口编程_STM32F103</h2><h3 id="5-1-看原理图确定引脚"><a href="#5-1-看原理图确定引脚" class="headerlink" title="5.1 看原理图确定引脚"></a>5.1 看原理图确定引脚</h3><h4 id="UART1"><a href="#UART1" class="headerlink" title="UART1:"></a>UART1:</h4><ul><li>TX——PA9</li><li>RX——PA10</li></ul><h3 id="5-2-使能GPIO-UART1时钟"><a href="#5-2-使能GPIO-UART1时钟" class="headerlink" title="5.2 使能GPIO&#x2F;UART1时钟"></a>5.2 使能GPIO&#x2F;UART1时钟</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/* 使能GPIOA/USART1时钟 */</span><br><span class="line">/* RCC_APB2ENR */</span><br><span class="line">pReg = (volatile unsigned int *)(0x40021000 + 0x18);</span><br><span class="line">*pReg |= (1&lt;&lt;2) | (1&lt;&lt;14);</span><br></pre></td></tr></table></figure><h3 id="5-3配置引脚为UART功能"><a href="#5-3配置引脚为UART功能" class="headerlink" title="5.3配置引脚为UART功能"></a>5.3配置引脚为UART功能</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 配置引脚功能: PA9(USART1_TX), PA10(USART1_RX) </span></span><br><span class="line"><span class="comment">* GPIOA_CRH = 0x40010800 + 0x04 */</span></span><br><span class="line">pReg = (<span class="keyword">volatile</span> <span class="type">unsigned</span> <span class="type">int</span> *)(<span class="number">0x40010800</span> + <span class="number">0x04</span>);</span><br><span class="line"><span class="comment">/* PA9(USART1_TX) */</span></span><br><span class="line">*pReg &amp;= ~((<span class="number">3</span>&lt;&lt;<span class="number">4</span>) | (<span class="number">3</span>&lt;&lt;<span class="number">6</span>));</span><br><span class="line">*pReg |= (<span class="number">1</span>&lt;&lt;<span class="number">4</span>) | (<span class="number">2</span>&lt;&lt;<span class="number">6</span>);  <span class="comment">/* Output mode, max speed 10 MHz; Alternate function output Push-pull */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* PA10(USART1_RX) */</span></span><br><span class="line">*pReg &amp;= ~((<span class="number">3</span>&lt;&lt;<span class="number">8</span>) | (<span class="number">3</span>&lt;&lt;<span class="number">10</span>));</span><br><span class="line">*pReg |= (<span class="number">0</span>&lt;&lt;<span class="number">8</span>) | (<span class="number">1</span>&lt;&lt;<span class="number">10</span>);  <span class="comment">/* Input mode (reset state); Floating input (reset state) */</span></span><br></pre></td></tr></table></figure><h3 id="5-4-设置串口参数"><a href="#5-4-设置串口参数" class="headerlink" title="5.4 设置串口参数"></a>5.4 设置串口参数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">int</span> <span class="type">uint32_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">volatile</span> <span class="type">uint32_t</span> SR;    <span class="comment">/*!&lt; USART Status register, Address offset: 0x00 */</span></span><br><span class="line">  <span class="keyword">volatile</span> <span class="type">uint32_t</span> DR;    <span class="comment">/*!&lt; USART Data register,   Address offset: 0x04 */</span></span><br><span class="line">  <span class="keyword">volatile</span> <span class="type">uint32_t</span> BRR;   <span class="comment">/*!&lt; USART Baud rate register, Address offset: 0x08 */</span></span><br><span class="line">  <span class="keyword">volatile</span> <span class="type">uint32_t</span> CR1;   <span class="comment">/*!&lt; USART Control register 1, Address offset: 0x0C */</span></span><br><span class="line">  <span class="keyword">volatile</span> <span class="type">uint32_t</span> CR2;   <span class="comment">/*!&lt; USART Control register 2, Address offset: 0x10 */</span></span><br><span class="line">  <span class="keyword">volatile</span> <span class="type">uint32_t</span> CR3;   <span class="comment">/*!&lt; USART Control register 3, Address offset: 0x14 */</span></span><br><span class="line">  <span class="keyword">volatile</span> <span class="type">uint32_t</span> GTPR;  <span class="comment">/*!&lt; USART Guard time and prescaler register, Address offset: 0x18 */</span></span><br><span class="line">&#125; USART_TypeDef;</span><br><span class="line"></span><br><span class="line">USART_TypeDef *usart1 = (USART_TypeDef *)<span class="number">0x40013800</span>;</span><br><span class="line"><span class="comment">/* 设置波特率</span></span><br><span class="line"><span class="comment"> * 115200 = 8000000/16/USARTDIV</span></span><br><span class="line"><span class="comment"> * USARTDIV = 4.34</span></span><br><span class="line"><span class="comment"> * DIV_Mantissa = 4</span></span><br><span class="line"><span class="comment"> * DIV_Fraction / 16 = 0.34</span></span><br><span class="line"><span class="comment"> * DIV_Fraction = 16*0.34 = 5</span></span><br><span class="line"><span class="comment"> * 真实波特率:</span></span><br><span class="line"><span class="comment"> * DIV_Fraction / 16 = 5/16=0.3125</span></span><br><span class="line"><span class="comment"> * USARTDIV = DIV_Mantissa + DIV_Fraction / 16 = 4.3125</span></span><br><span class="line"><span class="comment"> * baudrate = 8000000/16/4.3125 = 115942</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DIV_Mantissa 4</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DIV_Fraction 5</span></span><br><span class="line">usart1-&gt;BRR = (DIV_Mantissa&lt;&lt;<span class="number">4</span>) | (DIV_Fraction);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设置数据格式: 8n1 */</span>  <span class="comment">/* 使能USART1 */</span></span><br><span class="line">usart1-&gt;CR1 = (<span class="number">1</span>&lt;&lt;<span class="number">13</span>) | (<span class="number">0</span>&lt;&lt;<span class="number">12</span>) | (<span class="number">0</span>&lt;&lt;<span class="number">10</span>) | (<span class="number">1</span>&lt;&lt;<span class="number">3</span>) | (<span class="number">1</span>&lt;&lt;<span class="number">2</span>);</span><br><span class="line">usart1-&gt;CR2 &amp;= ~(<span class="number">3</span>&lt;&lt;<span class="number">12</span>);</span><br></pre></td></tr></table></figure><h3 id="5-4-根据状态寄存器读写数据"><a href="#5-4-根据状态寄存器读写数据" class="headerlink" title="5.4 根据状态寄存器读写数据"></a>5.4 根据状态寄存器读写数据</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 读数据 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">getchar</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">USART_TypeDef *usart1 = (USART_TypeDef *)<span class="number">0x40013800</span>;</span><br><span class="line"><span class="keyword">while</span> ((usart1-&gt;SR &amp; (<span class="number">1</span>&lt;&lt;<span class="number">5</span>)) == <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> usart1-&gt;DR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 写数据 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">putchar</span><span class="params">(<span class="type">char</span> c)</span></span><br><span class="line">&#123;</span><br><span class="line">USART_TypeDef *usart1 = (USART_TypeDef *)<span class="number">0x40013800</span>;</span><br><span class="line"><span class="keyword">while</span> ((usart1-&gt;SR &amp; (<span class="number">1</span>&lt;&lt;<span class="number">7</span>)) == <span class="number">0</span>);</span><br><span class="line">usart1-&gt;DR = c;</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、SPI协议"><a href="#三、SPI协议" class="headerlink" title="三、SPI协议"></a>三、SPI协议</h1><h2 id="1-SPI应用"><a href="#1-SPI应用" class="headerlink" title="1.SPI应用"></a>1.SPI应用</h2><p>SPI是串行外设接口（Serial Peripheral Interface）的缩写，是美国摩托罗拉公司（Motorola）最先推出的一种同步串行传输规范，也是一种单片机外设芯片串行扩展接口，是一种<strong>串行、同步、全双工</strong>通信总线，所以可以在同一时间发送和接收数据，SPI没有定义速度限制，通常能达到甚至超过10M&#x2F;bps。</p><h2 id="2-接口"><a href="#2-接口" class="headerlink" title="2.接口"></a>2.接口</h2><ul><li><strong>MISO</strong>:主设备数据输入，从设备数据输出</li><li><strong>MOSI</strong>:主设备数据输入，从设备数据输出</li><li><strong>CS</strong>:从设备使能信号，由主设备控制，一主多从时，CS&#x2F;SS是从芯片是否被主芯片选中的控制信号，只有片选信号为预先规定的使能信号时（高电位或低电位），主芯片对此从芯片的操作才有效,<strong>使用 CS信号线来寻址</strong></li><li><strong>SCLK</strong>:时钟信号，由主设备产生</li></ul><h2 id="3-协议"><a href="#3-协议" class="headerlink" title="3.协议"></a>3.协议</h2><p>SPI通讯时序图：</p><p><img src="/2023/11/02/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/image-20231102200224551.png" alt="image-20231102200224551"></p><ul><li><p><strong>起始和停止信号：</strong>在图中的标号1处，CS信号线由高变低，是 SPI 通讯的起始信号。在图中的标号6处，CS信号线由高变低，是 SPI 通讯的停止信号。</p></li><li><p><strong>数据有效性：</strong>SPI使用 MOSI及 MISO 信号线来传输数据，使用 SCK 信号线进行数据同步。 </p><p>MOSI及MISO 数据MSB 先行线在 SCK 的每个时钟周期传输一位数据，且数据输入输出是同时进行的。数据传输时(高位先行)或 LSB( 低位先行)先行并没有作硬性规定，但要保证两个 SP 通讯设备间使用同样协定，一般都会采用上图中的 MSB 先行(高位先行)模式。</p><p>观察图中的2345标号处，MOSI 及 MISO 的数据在 SCK 的上升沿期间变化输出，在SCLK 的下降沿被采样。即在 SCK 的下降沿时刻，MOSI 及 MISO 的数据有效，高电平时表示数据“1”，为低电6时表示数据“0”。在其它时刻，数据无效，MOSI及 MISO为下一次表示数据做准备，每次数据传输可以 8 位或 16 位为单位，每次传输的单位数不受限制。</p></li><li><p><strong>时钟极性（CPOL）和时钟相位（CPHA）</strong></p><p>上面讲的图中的时序只是 SPI 中的其中一种通讯模式，SPI共有四种通讯模式，它们的主要区别是:总线闲时 SCK 的时钟状态以及数据采样时刻。为方便说明，在此引入”时钟极性CPOL”和时钟相位 CPHA”<br><strong>时钟极性</strong>是指 SPI 通讯设备处于空闲状态时，SCK 信号线的电平信号(即 SPI 通讯开始CS 线为高电平时 SCK的状态)。 CPOL&#x3D;O 时，SCK 在空闲状态时为低电平，CPOL&#x3D;1前、时，则相反。<br><strong>时钟相</strong>位 CPHA 是指数据的采样的时刻，当 CPHA&#x3D; 0时，MOSI 或 MISO 数据线上的信号将会在 SCK 时钟线的“奇数边沿”被采样。当 CPHA&#x3D;1时，数据线在 SCK的“偶数边沿”采样</p></li></ul><h2 id="4-SPI编程-STM32F103"><a href="#4-SPI编程-STM32F103" class="headerlink" title="4.SPI编程_STM32F103"></a>4.SPI编程_STM32F103</h2><h3 id="4-1-看原理图确定引脚"><a href="#4-1-看原理图确定引脚" class="headerlink" title="4.1.看原理图确定引脚"></a>4.1.看原理图确定引脚</h3><p>SPI1_SCK:PB3</p><p>SPI1_MISO:PB4</p><p>SPI1_MOSI:PB5</p><h3 id="4-2-使能GPIO-SPI1时钟"><a href="#4-2-使能GPIO-SPI1时钟" class="headerlink" title="4.2.使能GPIO&#x2F;SPI1时钟"></a>4.2.使能GPIO&#x2F;SPI1时钟</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);<span class="comment">//使能GPIOB时钟</span></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);<span class="comment">//使能SPI1时钟</span></span><br></pre></td></tr></table></figure><h3 id="4-3-配置引脚为UART功能"><a href="#4-3-配置引脚为UART功能" class="headerlink" title="4.3.配置引脚为UART功能"></a>4.3.配置引脚为UART功能</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//GPIOFB3,4,5初始化设置</span></span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3|GPIO_Pin_4|GPIO_Pin_5;<span class="comment">//PB3~5复用功能输出</span></span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;<span class="comment">//复用功能</span></span><br><span class="line">GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;<span class="comment">//推挽输出</span></span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;<span class="comment">//100MHz</span></span><br><span class="line">GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;<span class="comment">//上拉</span></span><br><span class="line">GPIO_Init(GPIOB, &amp;GPIO_InitStructure);<span class="comment">//初始化</span></span><br><span class="line"></span><br><span class="line">GPIO_PinAFConfig(GPIOB,GPIO_PinSource3,GPIO_AF_SPI1); <span class="comment">//PB3复用为 SPI1</span></span><br><span class="line">GPIO_PinAFConfig(GPIOB,GPIO_PinSource4,GPIO_AF_SPI1); <span class="comment">//PB4复用为 SPI1</span></span><br><span class="line">GPIO_PinAFConfig(GPIOB,GPIO_PinSource5,GPIO_AF_SPI1); <span class="comment">//PB5复用为 SPI1</span></span><br></pre></td></tr></table></figure><h3 id="4-4-设置SPI参数"><a href="#4-4-设置SPI参数" class="headerlink" title="4.4.设置SPI参数"></a>4.4.设置SPI参数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;  <span class="comment">//设置SPI单向或者双向的数据模式:SPI设置为双线双向全双工</span></span><br><span class="line">SPI_InitStructure.SPI_Mode = SPI_Mode_Master;<span class="comment">//设置SPI工作模式:设置为主SPI</span></span><br><span class="line">SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;<span class="comment">//设置SPI的数据大小:SPI发送接收8位帧结构</span></span><br><span class="line">SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;<span class="comment">//串行同步时钟的空闲状态为高电平</span></span><br><span class="line">SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;<span class="comment">//串行同步时钟的第二个跳变沿（上升或下降）数据被采样</span></span><br><span class="line">SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;<span class="comment">//NSS信号由硬件（NSS管脚）还是软件（使用SSI位）管理:内部NSS信号有SSI位控制</span></span><br><span class="line">SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_256;<span class="comment">//定义波特率预分频的值:波特率预分频值为256</span></span><br><span class="line">SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;<span class="comment">//指定数据传输从MSB位还是LSB位开始:数据传输从MSB位开始</span></span><br><span class="line">SPI_InitStructure.SPI_CRCPolynomial = <span class="number">7</span>;<span class="comment">//CRC值计算的多项式</span></span><br><span class="line">SPI_Init(SPI1, &amp;SPI_InitStructure);  <span class="comment">//根据SPI_InitStruct中指定的参数初始化外设SPIx寄存器</span></span><br><span class="line">SPI_Cmd(SPI1, ENABLE); <span class="comment">//使能SPI外设</span></span><br></pre></td></tr></table></figure><h3 id="4-5-根据状态寄存器读写数据"><a href="#4-5-根据状态寄存器读写数据" class="headerlink" title="4.5.根据状态寄存器读写数据"></a>4.5.根据状态寄存器读写数据</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SPI1 读写一个字节</span></span><br><span class="line"><span class="comment">//TxData:要写入的字节</span></span><br><span class="line"><span class="comment">//返回值:读取到的字节</span></span><br><span class="line">u8 <span class="title function_">SPI1_ReadWriteByte</span><span class="params">(u8 TxData)</span></span><br><span class="line">&#123;  </span><br><span class="line"> </span><br><span class="line">  <span class="keyword">while</span> (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET)&#123;&#125;<span class="comment">//等待发送区空  </span></span><br><span class="line"></span><br><span class="line">SPI_I2S_SendData(SPI1, TxData); <span class="comment">//通过外设SPIx发送一个byte  数据</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET)&#123;&#125; <span class="comment">//等待接收完一个byte  </span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> SPI_I2S_ReceiveData(SPI1); <span class="comment">//返回通过SPIx最近接收的数据</span></span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四、IIC协议"><a href="#四、IIC协议" class="headerlink" title="四、IIC协议"></a>四、IIC协议</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>IIC协议是由数据线SDA和时钟线SCL构成的串行总线，可发送和接收数据，是一个<strong>多主机的同步、串行、半双工通信方式</strong>每个挂接在总线上的器件都有下难一的地址立速在标准模式下可达 100kbit&#x2F;s,在快速模式下可达400kbit&#x2F;s，在高速模式下可待3.4Mbit&#x2F;s。</p><p>I2C总线系统结构,如下所示:</p><p><img src="/2023/11/02/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/image-20231102202844411.png" alt="image-20231102202844411"></p><h2 id="2-协议"><a href="#2-协议" class="headerlink" title="2.协议"></a>2.协议</h2><h3 id="2-1-空闲状态"><a href="#2-1-空闲状态" class="headerlink" title="2.1.空闲状态"></a>2.1.空闲状态</h3><p>​当总线上的SDA和SCL两条信号线同时处于高电平,便是空闲状态,如上面的硬件图所示,当我们不传输数据 时, SDA和SCL被上拉电阻拉高,即进入空闲状态</p><h3 id="2-2-起始信号"><a href="#2-2-起始信号" class="headerlink" title="2.2.起始信号"></a>2.2.起始信号</h3><p>​当SCL为高期间，SDA由高到低的跳变；便是总线的启动信号,只能由主机发起,且在空闲状态下才能启动 该信号,如下图所示：</p><p><img src="/2023/11/02/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/image-20231102203404673.png" alt="image-20231102203404673"></p><h3 id="2-3-停止信号"><a href="#2-3-停止信号" class="headerlink" title="2.3.停止信号"></a>2.3.停止信号</h3><p>​当SCL为高期间，SDA由低到高的跳变；便是总线的停止信号,表示数据已传输完成,如下图所示：</p><p><img src="/2023/11/02/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/image-20231102203428037.png" alt="image-20231102203428037"></p><h3 id="2-4-传输数据格式"><a href="#2-4-传输数据格式" class="headerlink" title="2.4.传输数据格式"></a>2.4.传输数据格式</h3><p>​当发了起始信号后,就开始传输数据,传输的数据格式如下图所示：</p><p>当SCL为高电平时,便会获取SDA数据值,其中SDA数据必须是稳定的(若SDA不稳定就会变成起始&#x2F;停止信 号)。</p><p>当SCL为低电平时,便是SDA的电平变化状态</p><p>若主从机在传输数据期间,需要完成其它功能(例如中断),可以主动拉低SCL,使I2C进入等待状态,直到处理结束再释放SCL,数据传输会继续</p><p><img src="/2023/11/02/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/image-20231102203617556.png" alt="image-20231102203617556"></p><h3 id="2-5-应答信号"><a href="#2-5-应答信号" class="headerlink" title="2.5.应答信号"></a>2.5.应答信号</h3><p>I2C总线上的数据都是以<strong>8位数据(字节)<strong>进行的，当发送了8个数据后，</strong>发送方</strong>会在第9个时钟脉冲期间<strong>释放SDA数据</strong>，当接收方接收该字节成功，便会输出一个ACK应答信号，当SDA为高电平,表示为非应答信号NACK，当SDA为低电平，表示为有效应答信号ACK PS:</p><p>当主<strong>机为接收方时,收到最后一个字节后,主机可以不发送ACK,直接发送停止信号来结束传输</strong>。 当从机为接收方时，没有发送ACK，则表示从机可能在忙其它事、或者不匹配地址信号和不支持多主机 发送，主机可以发送停止信号，再次发送起始信号启动新的传输。</p><p><img src="/2023/11/02/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/image-20231102204513302.png" alt="image-20231102204513302"></p><h3 id="2-6-完整数据传输"><a href="#2-6-完整数据传输" class="headerlink" title="2.6.完整数据传输"></a>2.6.完整数据传输</h3><p>如下图所示, <strong>发送起始信号后</strong>,便发送一个<strong>8位的设备地址</strong>,其中<strong>第8位是对设备的读写标志</strong>,后面紧跟着的就是<strong>数据</strong>了,直到发送停止信号止。</p><p>PS:当我们第一次是读操作，然后想换成写操作时，可以再次发送一个起始信号，然后发送读的设备地 址，不需要停止信号便能实现不同的地址转换。</p><p><img src="/2023/11/02/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/image-20231102204641094.png" alt="image-20231102204641094"></p><h2 id="3-数据格式"><a href="#3-数据格式" class="headerlink" title="3.数据格式"></a>3.数据格式</h2><h3 id="3-1-写操作"><a href="#3-1-写操作" class="headerlink" title="3.1.写操作"></a>3.1.写操作</h3><p>刚开始主芯片要发出一个<strong>start信号</strong>，然后发出一个<strong>设备地址</strong>(用来确定是往哪一个芯片写数据)，<strong>方向</strong>(读&#x2F;写，0表示写，1表示读)。<strong>回应</strong>(用来确定这个设备是否存在)，然后就可以<strong>传输数据</strong>，传输数据之后，要有一个<strong>回应信号</strong>（确定数据是否接受完成)，然后再传输下一个数据。每传输一个数据，接受方都会有一个回应信号，数据发送完之后，主芯片就会发送一个<strong>停止信号</strong>。</p><p>白色背景：主→从。灰色背景：从→主</p><p><img src="/2023/11/02/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/image-20231102204958271.png" alt="image-20231102204958271"></p><h3 id="3-2-读操作"><a href="#3-2-读操作" class="headerlink" title="3.2.读操作"></a>3.2.读操作</h3><p>刚开始主芯片要发出一个<strong>start信号</strong>，然后发出一个<strong>设备地址</strong>(用来确定是从哪一个芯片读取数据)，<strong>方向</strong>(读&#x2F;写，0表示写，1表示读)。<strong>回应</strong>(用来确定这个设备是否存在)，然后就可以<strong>传输数据</strong>，传输数据之 后，要有一个回应信号（确定数据是否接受完成)，然后在传输下一个数据。每传输一个数据，接受方都 会有一个回应信号，数据发送完之后，主芯片就会发送一个停止信号。 </p><p>白色背景：主→从。灰色背景：从→主</p><p><img src="/2023/11/02/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/image-20231102205105562.png" alt="image-20231102205105562"></p><h2 id="4-IIC编程"><a href="#4-IIC编程" class="headerlink" title="4.IIC编程"></a>4.IIC编程</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;myiic.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="comment">////////////////////////////////////////////////////////////////////////////////// </span></span><br><span class="line"><span class="comment">//本程序只供学习使用，未经作者许可，不得用于其它任何用途</span></span><br><span class="line"><span class="comment">//ALIENTEK STM32F407开发板</span></span><br><span class="line"><span class="comment">//IIC 驱动代码   </span></span><br><span class="line"><span class="comment">//正点原子@ALIENTEK</span></span><br><span class="line"><span class="comment">//技术论坛:www.openedv.com</span></span><br><span class="line"><span class="comment">//创建日期:2014/5/6</span></span><br><span class="line"><span class="comment">//版本：V1.0</span></span><br><span class="line"><span class="comment">//版权所有，盗版必究。</span></span><br><span class="line"><span class="comment">//Copyright(C) 广州市星翼电子科技有限公司 2014-2024</span></span><br><span class="line"><span class="comment">//All rights reserved  </span></span><br><span class="line"><span class="comment">////////////////////////////////////////////////////////////////////////////////// </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化IIC</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  GPIO_InitTypeDef  GPIO_InitStructure;</span><br><span class="line"></span><br><span class="line">  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);<span class="comment">//使能GPIOB时钟</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//GPIOB8,B9初始化设置</span></span><br><span class="line">  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9;</span><br><span class="line">  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;<span class="comment">//普通输出模式</span></span><br><span class="line">  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;<span class="comment">//推挽输出</span></span><br><span class="line">  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;<span class="comment">//100MHz</span></span><br><span class="line">  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;<span class="comment">//上拉</span></span><br><span class="line">  GPIO_Init(GPIOB, &amp;GPIO_InitStructure);<span class="comment">//初始化</span></span><br><span class="line">IIC_SCL=<span class="number">1</span>;</span><br><span class="line">IIC_SDA=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//产生IIC起始信号</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_Start</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">SDA_OUT();     <span class="comment">//sda线输出</span></span><br><span class="line">IIC_SDA=<span class="number">1</span>;    </span><br><span class="line">IIC_SCL=<span class="number">1</span>;</span><br><span class="line">delay_us(<span class="number">4</span>);</span><br><span class="line"> IIC_SDA=<span class="number">0</span>;<span class="comment">//START:when CLK is high,DATA change form high to low </span></span><br><span class="line">delay_us(<span class="number">4</span>);</span><br><span class="line">IIC_SCL=<span class="number">0</span>;<span class="comment">//钳住I2C总线，准备发送或接收数据 </span></span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//产生IIC停止信号</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_Stop</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">SDA_OUT();<span class="comment">//sda线输出</span></span><br><span class="line">IIC_SCL=<span class="number">0</span>;</span><br><span class="line">IIC_SDA=<span class="number">0</span>;<span class="comment">//STOP:when CLK is high DATA change form low to high</span></span><br><span class="line"> delay_us(<span class="number">4</span>);</span><br><span class="line">IIC_SCL=<span class="number">1</span>; </span><br><span class="line">IIC_SDA=<span class="number">1</span>;<span class="comment">//发送I2C总线结束信号</span></span><br><span class="line">delay_us(<span class="number">4</span>);   </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//等待应答信号到来</span></span><br><span class="line"><span class="comment">//返回值：1，接收应答失败</span></span><br><span class="line"><span class="comment">//        0，接收应答成功</span></span><br><span class="line">u8 <span class="title function_">IIC_Wait_Ack</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">u8 ucErrTime=<span class="number">0</span>;</span><br><span class="line">SDA_IN();      <span class="comment">//SDA设置为输入  </span></span><br><span class="line">IIC_SDA=<span class="number">1</span>;delay_us(<span class="number">1</span>);   </span><br><span class="line">IIC_SCL=<span class="number">1</span>;delay_us(<span class="number">1</span>); </span><br><span class="line"><span class="keyword">while</span>(READ_SDA)</span><br><span class="line">&#123;</span><br><span class="line">ucErrTime++;</span><br><span class="line"><span class="keyword">if</span>(ucErrTime&gt;<span class="number">250</span>)</span><br><span class="line">&#123;</span><br><span class="line">IIC_Stop();</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">IIC_SCL=<span class="number">0</span>;<span class="comment">//时钟输出0    </span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//产生ACK应答</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_Ack</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">IIC_SCL=<span class="number">0</span>;</span><br><span class="line">SDA_OUT();</span><br><span class="line">IIC_SDA=<span class="number">0</span>;</span><br><span class="line">delay_us(<span class="number">2</span>);</span><br><span class="line">IIC_SCL=<span class="number">1</span>;</span><br><span class="line">delay_us(<span class="number">2</span>);</span><br><span class="line">IIC_SCL=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不产生ACK应答    </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_NAck</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">IIC_SCL=<span class="number">0</span>;</span><br><span class="line">SDA_OUT();</span><br><span class="line">IIC_SDA=<span class="number">1</span>;</span><br><span class="line">delay_us(<span class="number">2</span>);</span><br><span class="line">IIC_SCL=<span class="number">1</span>;</span><br><span class="line">delay_us(<span class="number">2</span>);</span><br><span class="line">IIC_SCL=<span class="number">0</span>;</span><br><span class="line">&#125;      </span><br><span class="line"><span class="comment">//IIC发送一个字节</span></span><br><span class="line"><span class="comment">//返回从机有无应答</span></span><br><span class="line"><span class="comment">//1，有应答</span></span><br><span class="line"><span class="comment">//0，无应答  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_Send_Byte</span><span class="params">(u8 txd)</span></span><br><span class="line">&#123;                        </span><br><span class="line">    u8 t;   </span><br><span class="line">SDA_OUT();     </span><br><span class="line">    IIC_SCL=<span class="number">0</span>;<span class="comment">//拉低时钟开始数据传输</span></span><br><span class="line">    <span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;<span class="number">8</span>;t++)</span><br><span class="line">    &#123;              </span><br><span class="line">        IIC_SDA=(txd&amp;<span class="number">0x80</span>)&gt;&gt;<span class="number">7</span>;</span><br><span class="line">        txd&lt;&lt;=<span class="number">1</span>;   </span><br><span class="line">delay_us(<span class="number">2</span>);   <span class="comment">//对TEA5767这三个延时都是必须的</span></span><br><span class="line">IIC_SCL=<span class="number">1</span>;</span><br><span class="line">delay_us(<span class="number">2</span>); </span><br><span class="line">IIC_SCL=<span class="number">0</span>;</span><br><span class="line">delay_us(<span class="number">2</span>);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;     </span><br><span class="line"><span class="comment">//读1个字节，ack=1时，发送ACK，ack=0，发送nACK   </span></span><br><span class="line">u8 <span class="title function_">IIC_Read_Byte</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> ack)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i,receive=<span class="number">0</span>;</span><br><span class="line">SDA_IN();<span class="comment">//SDA设置为输入</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++ )</span><br><span class="line">&#123;</span><br><span class="line">        IIC_SCL=<span class="number">0</span>; </span><br><span class="line">        delay_us(<span class="number">2</span>);</span><br><span class="line">IIC_SCL=<span class="number">1</span>;</span><br><span class="line">        receive&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(READ_SDA)receive++;   </span><br><span class="line">delay_us(<span class="number">1</span>); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">if</span> (!ack)</span><br><span class="line">        IIC_NAck();<span class="comment">//发送nACK</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        IIC_Ack(); <span class="comment">//发送ACK   </span></span><br><span class="line">    <span class="keyword">return</span> receive;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 通信协议 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表</title>
      <link href="/2023/10/27/%E9%93%BE%E8%A1%A8/"/>
      <url>/2023/10/27/%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="1-链表的概念"><a href="#1-链表的概念" class="headerlink" title="1.链表的概念"></a>1.链表的概念</h2><p>链表是一种常见的基础数据结构，结构体指针在这里得到了充分的利用。链表可以动态的进行存储分配，也就是说，链表是一个功能极为强大的数组，它可以在节点中定义多种数据类型，还可以根据需要随意增添，删除，插入节点。</p><p>链表都有一个头指针，一般以head来表示，存放的是一个地址。链表中的节点分为两类，头结点和一般节点，头结点是没有数据域的。链表中每个节点都分为两部分，一个数据域，一个是指针域。说到这里你应该就明白了，链表就如同车链子一样，head指向第一个元素：第一个元素又指向第二个元素；……，直到最后一个元素，该元素不再指向其它元素，它称为“表尾”，它的地址部分放个“NULL”（表示“空地址”），链表到此结束</p><h2 id="1-链表操作的难点-指针"><a href="#1-链表操作的难点-指针" class="headerlink" title="1. 链表操作的难点:指针"></a>1. 链表操作的难点:指针</h2><p>理解了指针，对于链表就容易理解了。</p><p>2个口诀：</p><ul><li>变量变量，能变，就是能读能写，必定在内存里</li><li>指针指针，保存的是地址，32位处理器中地址都是32位的，无论是什么类型的指针变量，都是4字节</li></ul><h2 id="2-链表类型"><a href="#2-链表类型" class="headerlink" title="2. 链表类型"></a>2. 链表类型</h2><p><img src="/%E9%93%BE%E8%A1%A8/01_link_type.png" alt="image-20220313120114693"></p><h2 id="3-普通的链表插入删除排序操作"><a href="#3-普通的链表插入删除排序操作" class="headerlink" title="3. 普通的链表插入删除排序操作"></a>3. 普通的链表插入删除排序操作</h2><h3 id="3-1-创建链表"><a href="#3-1-创建链表" class="headerlink" title="3.1 创建链表"></a>3.1 创建链表</h3><ul><li>创建两个结构体，一个表示链表的头部，一个表示链表项</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">person</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> *name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">person</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list</span> &#123;</span></span><br><span class="line"><span class="type">char</span> *name; </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">person</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="3-2-初始化链表"><a href="#3-2-初始化链表" class="headerlink" title="3.2 初始化链表"></a>3.2 初始化链表</h3><ul><li>让链表的头部指向为NULL</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">InitList</span><span class="params">(<span class="keyword">struct</span> <span class="built_in">list</span> *pList, <span class="type">char</span> *name)</span></span><br><span class="line">&#123;</span><br><span class="line">pList-&gt;name = name;</span><br><span class="line">pList-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-插入链表"><a href="#3-3-插入链表" class="headerlink" title="3.3 插入链表"></a>3.3 插入链表</h3><ul><li><p>往链表的最后一项插入，最后一项指向为NULL</p><p><img src="/%E9%93%BE%E8%A1%A8/image-20231027182219023.png" alt="image-20231027182219023"></p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">AddItemToList</span><span class="params">(<span class="keyword">struct</span> <span class="built_in">list</span> *pList, <span class="keyword">struct</span> person *new_persion)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">person</span> *<span class="title">last</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 如果是空链表 */</span></span><br><span class="line"><span class="keyword">if</span> (pList-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">pList-&gt;next = new_persion;</span><br><span class="line">new_persion-&gt;next =<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 找出链表的最后一项 */</span></span><br><span class="line">last = pList-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (last-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line">last = last-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* last-&gt;next == NULL */</span></span><br><span class="line">last-&gt;next = new_persion;</span><br><span class="line">new_persion-&gt;next =<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-链表中删除项"><a href="#3-4-链表中删除项" class="headerlink" title="3.4 链表中删除项"></a>3.4 链表中删除项</h3><p>分为两种情况：</p><ul><li><p>删除的是第一项</p><p><img src="/%E9%93%BE%E8%A1%A8/image-20231027181925007.png" alt="image-20231027181925007"></p></li><li><p>删除的是其他项</p><p><img src="/%E9%93%BE%E8%A1%A8/image-20231027182349405.png" alt="image-20231027182349405"></p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">DelItemFromList</span><span class="params">(<span class="keyword">struct</span> <span class="built_in">list</span> *pList, <span class="keyword">struct</span> person *person)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">person</span> *<span class="title">p</span> =</span> pList-&gt;next;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">person</span> *<span class="title">pre</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 找到person */</span></span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span> &amp;&amp; p != person)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 后面还有人, 移动到下一个 */</span></span><br><span class="line">pre = p;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 退出的条件: p==NULL, p == person */</span></span><br><span class="line"><span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;can not find the person to del\r\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pre == <span class="literal">NULL</span>) <span class="comment">/* 前面无人, 表示要删除的是第1项 */</span></span><br><span class="line">&#123;</span><br><span class="line">pList-&gt;next = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">pre-&gt;next = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-链表排序"><a href="#3-5-链表排序" class="headerlink" title="3.5 链表排序"></a>3.5 链表排序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">SortList</span><span class="params">(<span class="keyword">struct</span> <span class="built_in">list</span> *pList)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">person</span> *<span class="title">pre</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">person</span> *<span class="title">next</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *tmp_name;</span><br><span class="line"><span class="type">int</span> tmp_age;</span><br><span class="line"></span><br><span class="line">pre = pList-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (pre == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (pre)</span><br><span class="line">&#123;</span><br><span class="line">next = pre-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (pre-&gt;age &gt; next-&gt;age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 交换值 */</span></span><br><span class="line">tmp_name = pre-&gt;name;</span><br><span class="line">pre-&gt;name = next-&gt;name;</span><br><span class="line">next-&gt;name = tmp_name;</span><br><span class="line"></span><br><span class="line">tmp_age = pre-&gt;age;</span><br><span class="line">pre-&gt;age = next-&gt;age;</span><br><span class="line">next-&gt;age = tmp_age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">next = next-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pre = pre-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-普通的链表改进"><a href="#3-普通的链表改进" class="headerlink" title="3. 普通的链表改进"></a>3. 普通的链表改进</h2><p>主要是因为刚才的链表头部与链表项的操作不同一</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pList-&gt;next</span><br><span class="line">person-&gt;next</span><br></pre></td></tr></table></figure><h3 id="3-1-创建链表-1"><a href="#3-1-创建链表-1" class="headerlink" title="3.1 创建链表"></a>3.1 创建链表</h3><ul><li>创建两个结构体，一个表示链表的头部，一个表示链表项</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">person</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> *name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">person</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list</span> &#123;</span></span><br><span class="line"><span class="type">char</span> *name; </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">person</span> <span class="title">head</span>;</span>  <span class="comment">/* 这里不再使用指针，而是使用结构体来表示头部 */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="3-2-初始化链表-1"><a href="#3-2-初始化链表-1" class="headerlink" title="3.2 初始化链表"></a>3.2 初始化链表</h3><ul><li>让链表的头部指向为NULL</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">InitList</span><span class="params">(<span class="keyword">struct</span> <span class="built_in">list</span> *pList, <span class="type">char</span> *name)</span></span><br><span class="line">&#123;</span><br><span class="line">pList-&gt;name = name;</span><br><span class="line">pList-&gt;head.next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-插入链表-1"><a href="#3-3-插入链表-1" class="headerlink" title="3.3 插入链表"></a>3.3 插入链表</h3><ul><li><p>往链表的最后一项插入，最后一项指向为NULL</p><p><img src="/%E9%93%BE%E8%A1%A8/image-20231027182219023.png" alt="image-20231027182219023"></p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">AddItemToList</span><span class="params">(<span class="keyword">struct</span> <span class="built_in">list</span> *pList, <span class="keyword">struct</span> person *new_persion)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">person</span> *<span class="title">last</span> =</span> &amp;pList-&gt;head;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 找出链表的最后一项 */</span></span><br><span class="line"><span class="keyword">while</span> (last-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line">last = last-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* last-&gt;next == NULL */</span></span><br><span class="line">last-&gt;next = new_persion;</span><br><span class="line">new_persion-&gt;next =<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-链表中删除项-1"><a href="#3-4-链表中删除项-1" class="headerlink" title="3.4 链表中删除项"></a>3.4 链表中删除项</h3><p>分为两种情况：</p><ul><li><p>删除的是第一项</p><p><img src="/%E9%93%BE%E8%A1%A8/image-20231027181925007.png" alt="image-20231027181925007"></p></li><li><p>删除的是其他项</p><p><img src="/%E9%93%BE%E8%A1%A8/image-20231027182349405.png" alt="image-20231027182349405"></p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">DelItemFromList</span><span class="params">(<span class="keyword">struct</span> <span class="built_in">list</span> *pList, <span class="keyword">struct</span> person *person)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">person</span> *<span class="title">pre</span> =</span> &amp;pList-&gt;head;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 找到person */</span></span><br><span class="line"><span class="keyword">while</span> (pre != <span class="literal">NULL</span> &amp;&amp; pre-&gt;next != person)</span><br><span class="line">&#123;</span><br><span class="line">pre = pre-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 没找到 */</span></span><br><span class="line"><span class="keyword">if</span> (pre == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">pre-&gt;next = person-&gt;next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-链表排序-1"><a href="#3-5-链表排序-1" class="headerlink" title="3.5 链表排序"></a>3.5 链表排序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">SortList</span><span class="params">(<span class="keyword">struct</span> <span class="built_in">list</span> *pList)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">person</span> *<span class="title">pre</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">person</span> *<span class="title">next</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *tmp_name;</span><br><span class="line"><span class="type">int</span> tmp_age;</span><br><span class="line"></span><br><span class="line">pre = pList-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (pre == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (pre)</span><br><span class="line">&#123;</span><br><span class="line">next = pre-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (pre-&gt;age &gt; next-&gt;age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 交换值 */</span></span><br><span class="line">tmp_name = pre-&gt;name;</span><br><span class="line">pre-&gt;name = next-&gt;name;</span><br><span class="line">next-&gt;name = tmp_name;</span><br><span class="line"></span><br><span class="line">tmp_age = pre-&gt;age;</span><br><span class="line">pre-&gt;age = next-&gt;age;</span><br><span class="line">next-&gt;age = tmp_age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">next = next-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pre = pre-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-通用链表"><a href="#4-通用链表" class="headerlink" title="4. 通用链表"></a>4. 通用链表</h2><h2 id="5-双向链表"><a href="#5-双向链表" class="headerlink" title="5. 双向链表"></a>5. 双向链表</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>代码重定位</title>
      <link href="/2023/10/23/%E4%BB%A3%E7%A0%81%E9%87%8D%E5%AE%9A%E4%BD%8D/"/>
      <url>/2023/10/23/%E4%BB%A3%E7%A0%81%E9%87%8D%E5%AE%9A%E4%BD%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="一、段的概念"><a href="#一、段的概念" class="headerlink" title="一、段的概念"></a>一、段的概念</h1><p>代码段、只读数据段、可读可写的数据段、BSS段。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> g_Char = <span class="string">&#x27;A&#x27;</span>;           <span class="comment">// 可读可写，不能放在ROM上，应该放在RAM里</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> g_Char2 = <span class="string">&#x27;B&#x27;</span>;    <span class="comment">// 只读变量，可以放在ROM上</span></span><br><span class="line"><span class="type">int</span> g_A = <span class="number">0</span>;   <span class="comment">// 初始值为0，干嘛浪费空间保存在ROM上？没必要</span></span><br><span class="line"><span class="type">int</span> g_B;       <span class="comment">// 没有初始化，干嘛浪费空间保存在ROM上？没必要</span></span><br></pre></td></tr></table></figure><p>所以，程序分为这几个段：</p><ul><li>代码段(RO-CODE)：就是程序本身，不会被修改</li><li>可读可写的数据段(RW-DATA)：有初始值的全局变量、静态变量，<strong>需要从ROM上复制到内存</strong></li><li>只读的数据段(RO-DATA)：可以放在ROM上，不需要复制到内存</li><li>BSS段或ZI段：<ul><li>初始值为0的全局变量或静态变量，没必要放在ROM上，使用之前清零就可以</li><li>未初始化的全局变量或静态变量，没必要放在ROM上，使用之前清零就可以</li></ul></li><li>局部变量：保存在栈中，运行时生成</li><li>堆：一块空闲空间，使用malloc函数来管理它，malloc函数可以自己写</li></ul><h1 id="二、重定位要做的事"><a href="#二、重定位要做的事" class="headerlink" title="二、重定位要做的事"></a>二、重定位要做的事</h1><h2 id="1-程序中含有什么？"><a href="#1-程序中含有什么？" class="headerlink" title="1. 程序中含有什么？"></a>1. 程序中含有什么？</h2><ul><li>代码段：如果它不在链接地址上，就需要重定位</li><li>只读数据段：如果它不在链接地址上，就需要重定位</li><li>可读可写的数据段：如果它不在链接地址上，就需要重定位</li><li>BSS段：不需要重定位，因为程序里根本不保存BSS段，使用前把BSS段对应的空间清零即可</li></ul><h2 id="2-谁来做重定位？"><a href="#2-谁来做重定位？" class="headerlink" title="2. 谁来做重定位？"></a>2. 谁来做重定位？</h2><ul><li>程序本身：它把自己复制到链接地址去</li><li>一开始，程序可能并不位于它的链接地址上，为什么它可以执行重定位的操作？<ul><li>因为重定位的代码是使用<strong>“位置无关码”</strong>写的</li></ul></li><li>什么叫位置无关码：这段代码扔在任何位置都可以运行，跟它所在的位置无关</li><li>怎么写出<strong>位置无关码：</strong><ul><li>跳转：使用相对跳转指令，不能使用绝对跳转指令<ul><li>只能使用branch指令(比如<code>bl main</code>)，不能给PC直接复制，比如<code>ldr pc, =main</code></li></ul></li><li>不要访问全局变量、静态变量</li><li>不使用字符串</li></ul></li></ul><h2 id="3-怎么做重定位和清除BSS段？"><a href="#3-怎么做重定位和清除BSS段？" class="headerlink" title="3. 怎么做重定位和清除BSS段？"></a>3. 怎么做重定位和清除BSS段？</h2><ul><li>核心：复制</li><li>复制的三要素：源、目的、长度<ul><li>怎么知道代码段&#x2F;数据段保存在哪？(加载地址)</li><li>怎么知道代码段&#x2F;数据段要被复制到哪？(链接地址)</li><li>怎么知道代码段&#x2F;数据段的长度？</li></ul></li><li>怎么知道BSS段的地址范围：起始地址、长度？</li><li>这一切<ul><li>在keil中使用散列文件(Scatter File)来描述</li><li>在GCC中使用链接脚本(Link Script)来描述</li></ul></li></ul><h2 id="4-加载地址和链接地址的区别"><a href="#4-加载地址和链接地址的区别" class="headerlink" title="4. 加载地址和链接地址的区别"></a>4. 加载地址和链接地址的区别</h2><p>程序运行时，<strong>应该</strong>位于它的链接地址处，因为：</p><ul><li>使用函数地址时用的是”函数的链接地址”，所以代码段<strong>应该</strong>位于链接地址处</li><li>去访问全局变量、静态变量时，用的是”变量的链接地址”，所以数据段<strong>应该</strong>位于链接地址处</li></ul><p>但是： 程序一开始时可能并没有位于它的”链接地址”：</p><ul><li>比如对于STM32F103，程序被烧录器烧写在Flash上，这个地址称为”加载地址”</li><li>比如对于IMX6ULL&#x2F;STM32MP157，片内ROM根据头部信息把程序读入内存，这个地址称为“加载地址”</li></ul><p>当<strong>加载地址 ！&#x3D; 链接地址</strong>时，就需要重定位。</p><h1 id="四、散列文件使用与分析"><a href="#四、散列文件使用与分析" class="headerlink" title="四、散列文件使用与分析"></a>四、散列文件使用与分析</h1><h2 id="1-重定位的实质-移动数据"><a href="#1-重定位的实质-移动数据" class="headerlink" title="1. 重定位的实质: 移动数据"></a>1. 重定位的实质: 移动数据</h2><p>把代码段、只读数据段、数据段，移动到它的链接地址处。<br>也就是<strong>复制</strong>！<br>数据复制的三要素：源、目的、长度。</p><ul><li><p>数据保存在哪里？加载地址</p></li><li><p>数据要复制到哪里？链接地址</p></li><li><p>长度</p></li></ul><p>这3要素怎么得到？<br>在keil中，使用散列文件来描述。<br>散列？分散排列？<br>是的，在STM32F103这类资源紧缺的单片机芯片中，</p><ul><li>代码段保存在Flash上，直接在Flash上运行(当然也可以重定位到内存里)</li><li>数据段保存在Flash上，使用前被复制到内存里</li></ul><h2 id="2-散列文件示例"><a href="#2-散列文件示例" class="headerlink" title="2. 散列文件示例"></a>2. 散列文件示例</h2><h3 id="2-1-示例代码"><a href="#2-1-示例代码" class="headerlink" title="2.1 示例代码"></a>2.1 示例代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">; *************************************************************</span><br><span class="line">; *** Scatter-Loading Description File generated by uVision ***</span><br><span class="line">; *************************************************************</span><br><span class="line"></span><br><span class="line">LR_IROM1 0x08000000 0x00080000  &#123;    ; load region size_region</span><br><span class="line">  ER_IROM1 0x08000000 0x00080000  &#123;  ; load address = execution address</span><br><span class="line">   *.o (RESET, +First)</span><br><span class="line">   .ANY (+RO)</span><br><span class="line">   .ANY (+XO)</span><br><span class="line">  &#125;</span><br><span class="line">  RW_IRAM1 0x20000000 0x00010000  &#123;  ; RW data</span><br><span class="line">   .ANY (+RW +ZI)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-散列文件语法"><a href="#2-2-散列文件语法" class="headerlink" title="2.2 散列文件语法"></a>2.2 散列文件语法</h3><p>一个散列文件由一个或多个<code>Load region</code>组成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">load_region_description ::=</span><br><span class="line">load_region_name (base_address | (&quot;+&quot; offset)) [attribute_list] [max_size]</span><br><span class="line">&quot;&#123;&quot;</span><br><span class="line">execution_region_description+</span><br><span class="line">&quot;&#125;</span><br></pre></td></tr></table></figure><p><code>Load region</code>中含有一个或多个<code>Execution region</code>，<br><code>Execution region</code>语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">execution_region_description ::=</span><br><span class="line">exec_region_name (base_address | &quot;+&quot; offset) [attribute_list] [max_size | length]</span><br><span class="line">&quot;&#123;&quot;</span><br><span class="line">input_section_description*</span><br><span class="line">&quot;&#125;</span><br></pre></td></tr></table></figure><p><code>Execution region</code>中含有一个或多个<code>Input section</code>，<br><code>Input section</code>语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">input_section_description ::=</span><br><span class="line">module_select_pattern [ &quot;(&quot; input_section_selector ( &quot;,&quot;</span><br><span class="line">input_section_selector )* &quot;)&quot; ]</span><br><span class="line">input_section_selector ::=</span><br><span class="line">&quot;+&quot; input_section_attr |</span><br><span class="line">input_section_pattern |</span><br><span class="line">input_section_type |</span><br><span class="line">input_symbol_pattern |</span><br><span class="line">section_properties</span><br></pre></td></tr></table></figure><h2 id="3-散列文件解析"><a href="#3-散列文件解析" class="headerlink" title="3. 散列文件解析"></a>3. 散列文件解析</h2><p><img src="/2023/10/23/%E4%BB%A3%E7%A0%81%E9%87%8D%E5%AE%9A%E4%BD%8D/001_sct_example.png"></p><p><img src="/2023/10/23/%E4%BB%A3%E7%A0%81%E9%87%8D%E5%AE%9A%E4%BD%8D/image-20231016192932240.png" alt="image-20231016192932240"></p><p>*.o ：所有objects文件</p><p>*：所有objects文件和库，在一个散列文件中只能使用一个*</p><p>.ANY：等同于*，优先级比*低；在一个散列文件的多个可执行域中可以有多个<code>.ANY</code></p><h2 id="4-怎么获得region的信息"><a href="#4-怎么获得region的信息" class="headerlink" title="4. 怎么获得region的信息"></a>4. 怎么获得region的信息</h2><h3 id="4-1-可执行域的信息"><a href="#4-1-可执行域的信息" class="headerlink" title="4.1 可执行域的信息"></a>4.1 可执行域的信息</h3><p><img src="/2023/10/23/%E4%BB%A3%E7%A0%81%E9%87%8D%E5%AE%9A%E4%BD%8D/002_execution_region_symbol.png"></p><h3 id="4-2-加载域的信息"><a href="#4-2-加载域的信息" class="headerlink" title="4.2 加载域的信息"></a>4.2 加载域的信息</h3><p><img src="/2023/10/23/%E4%BB%A3%E7%A0%81%E9%87%8D%E5%AE%9A%E4%BD%8D/003_load_region_symbol.png"></p><h3 id="4-3-汇编代码里怎么使用这些信息（数据段重定位）"><a href="#4-3-汇编代码里怎么使用这些信息（数据段重定位）" class="headerlink" title="4.3 汇编代码里怎么使用这些信息（数据段重定位）"></a>4.3 汇编代码里怎么使用这些信息（数据段重定位）</h3><p>示例代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">IMPORT |Image$$RW_IRAM1$$Base|</span><br><span class="line">IMPORT |Image$$RW_IRAM1$$Length|</span><br><span class="line">IMPORT |Load$$RW_IRAM1$$Base|</span><br><span class="line"></span><br><span class="line">LDR R0, = |Image$$RW_IRAM1$$Base|    ; DEST</span><br><span class="line">LDR R1, = |Load$$RW_IRAM1$$Base|     ; SORUCE</span><br><span class="line">LDR R2, = |Image$$RW_IRAM1$$Length|  ; LENGTH</span><br></pre></td></tr></table></figure><h3 id="4-4-C语言里怎么使用这些信息"><a href="#4-4-C语言里怎么使用这些信息" class="headerlink" title="4.4 C语言里怎么使用这些信息"></a>4.4 C语言里怎么使用这些信息</h3><h4 id="4-4-1-方法1"><a href="#4-4-1-方法1" class="headerlink" title="4.4.1 方法1"></a>4.4.1 方法1</h4><p>声明为外部变量。<br>注意：使用时<strong>需要</strong>使用取址符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">extern int Image$$RW_IRAM1$$Base;</span><br><span class="line">extern int Load$$RW_IRAM1$$Base;</span><br><span class="line">extern int Image$$RW_IRAM1$$Length;</span><br><span class="line"></span><br><span class="line">memcpy(&amp;Image$$RW_IRAM1$$Base, &amp;Image$$RW_IRAM1$$Length, &amp;Load$$RW_IRAM1$$Base);</span><br></pre></td></tr></table></figure><h4 id="4-4-2-方法2"><a href="#4-4-2-方法2" class="headerlink" title="4.4.2 方法2"></a>4.4.2 方法2</h4><p>声明为外部数组。<br>注意：使用时<strong>不需要</strong>使用取址符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">extern char Image$$RW_IRAM1$$Base[];</span><br><span class="line">extern char Load$$RW_IRAM1$$Base[];</span><br><span class="line">extern int Image$$RW_IRAM1$$Length;</span><br><span class="line"></span><br><span class="line">memcpy(Image$$RW_IRAM1$$Base, Image$$RW_IRAM1$$Length, &amp;Load$$RW_IRAM1$$Base);</span><br></pre></td></tr></table></figure><h1 id="五、清除BSS段-ZI段"><a href="#五、清除BSS段-ZI段" class="headerlink" title="五、清除BSS段(ZI段)"></a>五、清除BSS段(ZI段)</h1><h2 id="1-C语言中的BSS段"><a href="#1-C语言中的BSS段" class="headerlink" title="1. C语言中的BSS段"></a>1. C语言中的BSS段</h2><p>程序里的全局变量，如果它的初始值为0，或者没有设置初始值，这些变量被放在BSS段里，也叫ZI段。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> g_Char = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> g_Char2 = <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line"><span class="type">int</span> g_A = <span class="number">0</span>;  <span class="comment">// 放在BSS段</span></span><br><span class="line"><span class="type">int</span> g_B;      <span class="comment">// 放在BSS段</span></span><br></pre></td></tr></table></figure><p>BSS段并不会放入bin文件中，否则也太浪费空间了。<br>在使用BSS段里的变量之前，把BSS段所占据的内存清零就可以了。</p><ul><li><p>注意：对于keil来说，一个本该放到BSS段的变量，如果它所占据的空间小于等于8字节自己，keil仍然会把它放在data段里。只有当它所占据的空间大于8字节时，才会放到BSS段。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> g_A[<span class="number">3</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;   <span class="comment">// 放在BSS段</span></span><br><span class="line"><span class="type">char</span> g_B[<span class="number">9</span>];           <span class="comment">// 放在BSS段</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> g_A[<span class="number">2</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;   <span class="comment">// 放在data段</span></span><br><span class="line"><span class="type">char</span> g_B[<span class="number">8</span>];           <span class="comment">// 放在data段</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="2-清除BSS段"><a href="#2-清除BSS段" class="headerlink" title="2. 清除BSS段"></a>2. 清除BSS段</h2><h3 id="2-1-BSS段在哪？多大？"><a href="#2-1-BSS段在哪？多大？" class="headerlink" title="2.1 BSS段在哪？多大？"></a>2.1 BSS段在哪？多大？</h3><p>在散列文件中，BSS段(ZI段)在可执行域<code>RW_IRAM1</code>中描述：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">LR_IROM1 0x08000000 0x00080000  &#123;    ; load region size_region</span><br><span class="line">  ER_IROM1 0x08000000 0x00080000  &#123;  ; load address = execution address</span><br><span class="line">   *.o (RESET, +First)</span><br><span class="line">   *(InRoot$$Sections)</span><br><span class="line">   .ANY (+RO)</span><br><span class="line">   .ANY (+XO)</span><br><span class="line">  &#125;</span><br><span class="line">  RW_IRAM1 0x20000000 0x00010000  &#123;  ; RW data</span><br><span class="line">   .ANY (+RW +ZI)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BSS段(ZI段)的链接地址(基地址)、长度，使用下面的符号获得：<br><img src="/2023/10/23/%E4%BB%A3%E7%A0%81%E9%87%8D%E5%AE%9A%E4%BD%8D/004_bss_section_symbol.png"></p><h3 id="2-2-怎么清除BSS段"><a href="#2-2-怎么清除BSS段" class="headerlink" title="2.2  怎么清除BSS段"></a>2.2  怎么清除BSS段</h3><h4 id="2-2-1-汇编码"><a href="#2-2-1-汇编码" class="headerlink" title="2.2.1 汇编码"></a>2.2.1 汇编码</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">IMPORT |Image$$RW_IRAM1$$ZI$$Base|</span><br><span class="line">IMPORT |Image$$RW_IRAM1$$ZI$$Length|</span><br><span class="line"></span><br><span class="line">LDR R0, = |Image$$RW_IRAM1$$ZI$$Base|       ; DEST</span><br><span class="line">LDR R1, = |Image$$RW_IRAM1$$ZI$$Length|     ; Length</span><br><span class="line">BL memset</span><br></pre></td></tr></table></figure><h4 id="2-2-2-C语言"><a href="#2-2-2-C语言" class="headerlink" title="2.2.2 C语言"></a>2.2.2 C语言</h4><ul><li>方法1<br>声明为外部变量，使用时<strong>需要</strong>使用取址符：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">int</span> Image$$RW_IRAM1$$ZI$$Base;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> Image$$RW_IRAM1$$ZI$$Length;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(&amp;Image$$RW_IRAM1$$ZI$$Base, <span class="number">0</span>, &amp;Image$$RW_IRAM1$$ZI$$Length);</span><br></pre></td></tr></table></figure><ul><li>方法2<br>声明为外部数组，使用时<strong>不需要</strong>使用取址符：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">char</span> Image$$RW_IRAM1$$ZI$$Base[];</span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> Image$$RW_IRAM1$$ZI$$Length[];</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(Image$$RW_IRAM1$$ZI$$Base[], <span class="number">0</span>, Image$$RW_IRAM1$$ZI$$Length);</span><br></pre></td></tr></table></figure><h1 id="六、代码段重定位"><a href="#六、代码段重定位" class="headerlink" title="六、代码段重定位"></a>六、代码段重定位</h1><h2 id="1-加载地址等于链接地址"><a href="#1-加载地址等于链接地址" class="headerlink" title="1. 加载地址等于链接地址"></a>1. 加载地址等于链接地址</h2><p>在默认散列文件中，代码段的<code>load address = execution address</code>，<br>也就是加载地址和执行地址(链接地址)一致，所以无需重定位：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">LR_IROM1 0x08000000 0x00080000  &#123;    ; load region size_region</span><br><span class="line">  ER_IROM1 0x08000000 0x00080000  &#123;  ; load address = execution address</span><br><span class="line">   *.o (RESET, +First)</span><br><span class="line">   *(InRoot$$Sections)</span><br><span class="line">   .ANY (+RO)</span><br><span class="line">   .ANY (+XO)</span><br><span class="line">  &#125;</span><br><span class="line">  RW_IRAM1 0x20000000 0x00010000  &#123;  ; RW data</span><br><span class="line">   .ANY (+RW +ZI)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-加载地址不等于链接地址"><a href="#2-加载地址不等于链接地址" class="headerlink" title="2.加载地址不等于链接地址"></a>2.加载地址不等于链接地址</h2><p>有时候，我们需要把程序复制到内存里运行，比如：</p><ul><li>想让程序执行得更快：需要把代码段复制到内存里</li><li>程序很大，保存在片外SPI Flash中，SPI Flash上的代码无法直接执行，需要复制到内存里</li></ul><p>这时候，需要修改散列文件，把代码段的可执行域放在内存里。<br>那么程序运行时，需要尽快把代码段重定位到内存。<br>散列文件示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">LR_IROM1 0x08000000 0x00080000  &#123;    ; load region size_region</span><br><span class="line">  ER_IROM1 0x20000000   &#123;  ; load address != execution address</span><br><span class="line">   *.o (RESET, +First)</span><br><span class="line">   .ANY (+RO)</span><br><span class="line">   .ANY (+XO)</span><br><span class="line">  &#125;</span><br><span class="line">  RW_IRAM1 +0   &#123;  ; RW data</span><br><span class="line">   .ANY (+RW +ZI)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>改完之后出现报错（6个error）：</p><p>1.删除*(InRoot$$Sections)</p><p>2.将启动文件中的main改成mymain</p><p>不能打印：</p><p>将最开始执行的第二条指令改成 0x08000009</p></blockquote><p>上面的散列文件中：</p><ul><li>可执行域ER_IROM1<ul><li>加载地址为0x08000000，可执行地址为0x20000000，两者不相等</li><li>板子上电后，从0x08000000处开始运行，需要尽快把代码段复制到0x20000000</li></ul></li><li>可执行域RW_IRAM1<ul><li>加载地址：紧跟着ER_IROM1的加载地址</li><li>可执行地址：紧跟着ER_IROM1的可执行地址</li><li>需要尽快把数据段复制到可执行地址处</li></ul></li></ul><p>数据段的重定位我们做过实验，<br>如果代码段不重定位的话，会发生什么事？</p><h2 id="3-代码段不重定位的后果"><a href="#3-代码段不重定位的后果" class="headerlink" title="3. 代码段不重定位的后果"></a>3. 代码段不重定位的后果</h2><p>不能使用链接地址来调用函数</p><ul><li><p>汇编中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ldr  pc, =main   ; 这样调用函数时，用到main函数的链接地址，如果代码段没有重定位，则跳转失败</span><br></pre></td></tr></table></figure></li><li><p>C语言中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> (*funcptr)(<span class="type">const</span> <span class="type">char</span> *s, <span class="type">unsigned</span> <span class="type">int</span> val);</span><br><span class="line">funcptr = put_s_hex;</span><br><span class="line">funcptr(<span class="string">&quot;hello, test function ptr&quot;</span>, <span class="number">123</span>);</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-代码段重定位"><a href="#4-代码段重定位" class="headerlink" title="4. 代码段重定位"></a>4. 代码段重定位</h2><h3 id="4-1-代码段在哪？多大？"><a href="#4-1-代码段在哪？多大？" class="headerlink" title="4.1 代码段在哪？多大？"></a>4.1 代码段在哪？多大？</h3><p>在散列文件中，代码段在可执行域<code>ER_IROM1</code>中描述：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">LR_IROM1 0x08000000 0x00080000  &#123;    ; load region size_region</span><br><span class="line">  ER_IROM1 0x08000000 0x00080000  &#123;  ; load address = execution address</span><br><span class="line">   *.o (RESET, +First)</span><br><span class="line">   *(InRoot$$Sections)</span><br><span class="line">   .ANY (+RO)</span><br><span class="line">   .ANY (+XO)</span><br><span class="line">  &#125;</span><br><span class="line">  RW_IRAM1 0x20000000 0x00010000  &#123;  ; RW data</span><br><span class="line">   .ANY (+RW +ZI)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码段的链接地址(基地址)、长度，使用下面的符号获得：</p><p>005_text_section_execution_symbol.png)</p><p>代码段的加载地址，使用下面的符号获得：</p><p><img src="/2023/10/23/%E4%BB%A3%E7%A0%81%E9%87%8D%E5%AE%9A%E4%BD%8D/006_text_section_load_symbol.png"></p><h3 id="4-2-怎么重定位"><a href="#4-2-怎么重定位" class="headerlink" title="4.2 怎么重定位"></a>4.2 怎么重定位</h3><h4 id="4-2-1-汇编代码"><a href="#4-2-1-汇编代码" class="headerlink" title="4.2.1 汇编代码"></a>4.2.1 汇编代码</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">IMPORT |Image$$ER_IROM1$$Base|</span><br><span class="line">IMPORT |Image$$ER_IROM1$$Length|</span><br><span class="line">IMPORT |Load$$ER_IROM1$$Base|</span><br><span class="line"></span><br><span class="line">LDR R0, = |Image$$ER_IROM1$$Base|    ; DEST</span><br><span class="line">LDR R1, = |Load$$ER_IROM1$$Base|     ; SORUCE</span><br><span class="line">LDR R2, = |Image$$ER_IROM1$$Length|  ; LENGTH</span><br><span class="line">BL memcpy</span><br></pre></td></tr></table></figure><h4 id="4-2-2-C语言代码"><a href="#4-2-2-C语言代码" class="headerlink" title="4.2.2 C语言代码"></a>4.2.2 C语言代码</h4><ul><li>方法1</li></ul><p>声明为外部变量，使用时<strong>需要</strong>使用取址符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">extern int Image$$ER_IROM1$$Base;</span><br><span class="line">extern int Load$$ER_IROM1$$Base;</span><br><span class="line">extern int Image$$ER_IROM1$$Length;</span><br><span class="line"></span><br><span class="line">memcpy(&amp;Image$$ER_IROM1$$Base, &amp;Image$$ER_IROM1$$Length, &amp;Load$$ER_IROM1$$Base);</span><br></pre></td></tr></table></figure><ul><li>方法2</li></ul><p>声明为外部数组，使用时<strong>不需要</strong>使用取址符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">extern char Image$$ER_IROM1$$Base[];</span><br><span class="line">extern char Load$$ER_IROM1$$Base[];</span><br><span class="line">extern int Image$$ER_IROM1$$Length;</span><br><span class="line"></span><br><span class="line">memcpy(Image$$ER_IROM1$$Base, Image$$ER_IROM1$$Length, &amp;Load$$ER_IROM1$$Base);</span><br></pre></td></tr></table></figure><h2 id="5-为什么重定位之前的代码也可以正常运行？"><a href="#5-为什么重定位之前的代码也可以正常运行？" class="headerlink" title="5. 为什么重定位之前的代码也可以正常运行？"></a>5. 为什么重定位之前的代码也可以正常运行？</h2><p>因为重定位之前的代码是使用<strong>位置无关码</strong>写的：</p><ul><li><p>只使用相对跳转指令：B、BL</p></li><li><p>不只用绝对跳转指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LDR R0, =main</span><br><span class="line">BLX R0</span><br></pre></td></tr></table></figure></li><li><p>不访问全局变量、静态变量、字符串、数组</p></li><li><p>重定位完后，使用绝对跳转指令跳转到XXX函数的链接地址去</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BL main         ; bl相对跳转，程序仍在Flash上运行</span><br><span class="line"></span><br><span class="line">LDR R0, =main   ; 绝对跳转，跳到链接地址去，就是跳去内存里执行</span><br><span class="line">BLX R0</span><br></pre></td></tr></table></figure></li></ul><h1 id="七、重定位的纯C函数实现"><a href="#七、重定位的纯C函数实现" class="headerlink" title="七、重定位的纯C函数实现"></a>七、重定位的纯C函数实现</h1><h2 id="1-难点"><a href="#1-难点" class="headerlink" title="1. 难点"></a>1. 难点</h2><p>难点在于，怎么得到各个域的加载地址、链接地址、长度。</p><ul><li>方法1</li></ul><p>声明为外部变量，使用时<strong>需要</strong>使用取址符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">extern int Image$$ER_IROM1$$Base;</span><br><span class="line">extern int Load$$ER_IROM1$$Base;</span><br><span class="line">extern int Image$$ER_IROM1$$Length;</span><br><span class="line"></span><br><span class="line">memcpy(&amp;Image$$ER_IROM1$$Base, &amp;Image$$ER_IROM1$$Length, &amp;Load$$ER_IROM1$$Base);</span><br></pre></td></tr></table></figure><ul><li>方法2</li></ul><p>声明为外部数组，使用时<strong>不需要</strong>使用取址符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">extern char Image$$ER_IROM1$$Base[];</span><br><span class="line">extern char Load$$ER_IROM1$$Base[];</span><br><span class="line">extern int Image$$ER_IROM1$$Length;</span><br><span class="line"></span><br><span class="line">memcpy(Image$$ER_IROM1$$Base, Image$$ER_IROM1$$Length, &amp;Load$$ER_IROM1$$Base);</span><br></pre></td></tr></table></figure><h2 id="2-怎么理解上述代码"><a href="#2-怎么理解上述代码" class="headerlink" title="2. 怎么理解上述代码"></a>2. 怎么理解上述代码</h2><p> 对于这样的C变量：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> g_a;</span><br></pre></td></tr></table></figure><p>编译的时候会有一个符号表(symbol table)，如下：</p><table><thead><tr><th>Name</th><th>Address</th></tr></thead><tbody><tr><td>g_a</td><td>xxxxxxxx</td></tr></tbody></table><p>对于散列文件中的各类Symbol，有2中声明方式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">int</span> Image$$ER_IROM1$$Base;     <span class="comment">// 声明为一般变量</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">char</span> Image$$ER_IROM1$$Base[];  <span class="comment">// 声明为数组</span></span><br></pre></td></tr></table></figure><p>不管是哪种方式，它们都会保存在符号表里，比如：</p><table><thead><tr><th>Name</th><th>Address</th></tr></thead><tbody><tr><td>g_a</td><td>xxxxxxxx</td></tr><tr><td>Image$$ER_IROM1$$Base</td><td>yyyyyyyy</td></tr></tbody></table><ul><li>对于<code>int g_a</code>变量<ul><li>使用<code>&amp;g_a</code>得到符号表里的地址。</li></ul></li><li>对于<code>extern int Image$$ER_IROM1$$Base</code>变量<ul><li>要得到符号表中的地址，也是使用<code>&amp;Image$$ER_IROM1$$Base</code>。</li></ul></li><li>对于<code>extern char Image$$ER_IROM1$$Base[]</code>变量<ul><li>要得到符号表中的地址，直接使用<code>Image$$ER_IROM1$$Base</code>，不需要加<code>&amp;</code></li><li>为什么？mage$$ER_IROM1$$Base本身就表示地址啊</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> STM32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
            <tag> 架构 </tag>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四轴飞行器</title>
      <link href="/2023/10/21/%E5%9B%9B%E8%BD%B4%E9%A3%9E%E8%A1%8C%E5%99%A8/"/>
      <url>/2023/10/21/%E5%9B%9B%E8%BD%B4%E9%A3%9E%E8%A1%8C%E5%99%A8/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
            <tag> 无人机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32启动文件解析</title>
      <link href="/2023/10/21/STM32%E5%90%AF%E5%8A%A8%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/"/>
      <url>/2023/10/21/STM32%E5%90%AF%E5%8A%A8%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ARM体系架构</title>
      <link href="/2023/10/21/ARM%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84/"/>
      <url>/2023/10/21/ARM%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<blockquote><p>以下内容部分摘录自《ARM Cortex-M3 权威指南》、《ARM Cortex-M3与Cortex-M4权威指南》、《ARM ArchitectureReference Manual ARMv7-A and ARMv7-R edition》、韦东山老师的课程《深入理解ARM架构》，仅用于个人交流与学习，如涉及侵权请联系站长删除！</p></blockquote><h1 id="第一章-ARM架构版本及处理器系列介绍"><a href="#第一章-ARM架构版本及处理器系列介绍" class="headerlink" title="第一章 ARM架构版本及处理器系列介绍"></a>第一章 ARM架构版本及处理器系列介绍</h1><h2 id="1-ARM背景"><a href="#1-ARM背景" class="headerlink" title="1.ARM背景"></a>1.ARM背景</h2><p>ARM在1990年成立，当初的名字是“Advanced RISC Machines Ltd.,”，当时它是三家公司的合资——它们分别是苹果电脑，Acorn电脑公司，以及VLSI技术（公司）。</p><p>ARM的版本分为两类，一个是内核版本，一个处理器版本。</p><ul><li>内核版本也就是ARM架构，如ARMv1、ARMv2、ARMv3、ARMv4、ARMv5、ARMv6、ARMv7、ARMv8等。</li><li>处理器版本也就是ARM处理器，如ARM1、ARM9、ARM11、ARM Cortex-A（A7、A9、A15），ARM Cortex-M（M1、M3、M4）、ARM Cortex-R，这个也是我们通常意义上所指的ARM版本。</li></ul><h2 id="2-ARM架构与处理器的关系"><a href="#2-ARM架构与处理器的关系" class="headerlink" title="2.ARM架构与处理器的关系"></a>2.ARM架构与处理器的关系</h2><p>基于不同的ARM架构可以设计出不同特点的ARM处理器。比如基于ARMv3架构设计出的处理器ARM6、ARM7，这两款处理器适用于不同的场景，硬件可能不同，但是架构指令集是一样的。</p><p>举个例子，比如说盖房子，早期因为发展落后，盖的都是平房，这就是一种架构(ARMv5)，然后这种平房架构你可以设计出一款三室一厅的款式， 这叫ARM7处理器。 然后其他人(芯片设计公司)想盖房子的就买你这个款式去盖，接着过一段时间，有人觉得光三室一厅的不好， 我还想每个房间有独立卫! 于是，ARM就满足你们的要求，出个独卫的款式(ARM9)。</p><p>即ARMv5等是指令集的架构，ARM7&#x2F;9等是基于架构设计出的内核处理器。ARM的架构都是基于RISC指令集而设计的，内核处理器是实现这一指令集的硬件架构的基础。</p><h2 id="3-ARM版本"><a href="#3-ARM版本" class="headerlink" title="3.ARM版本"></a>3.ARM版本</h2><p><img src="/2023/10/21/ARM%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84/a.png"></p><p>最近的几年，基于从ARMv6开始的新设计理念，ARM进一步扩展了它的CPU设计，成果 就是ARMv7架构的闪亮登场。在这个版本中，内核架构首次从单一款式变成3种款式。 </p><ul><li><p>款式A：设计用于高性能的“开放应用平台”——越来越接近电脑了 </p></li><li><p>款式R：用于高端的嵌入式系统，尤其是那些带有实时要求的——又要快又要实时。 </p></li><li><p>款式M：用于深度嵌入的，单片机风格的系统中——本文章主要讲解的知识。</p></li></ul><p>让我们再进距离地考察这3种款式： </p><ul><li>款式A（ARMv7‐A）：需要运行复杂应用程序的“应用处理器” 。支持大型嵌入式操作系统，比如Symbian（诺基亚智能手机用），Linux，以及微软 的Windows CE和智能手机操作系统Windows Mobile。这些应用需要劲爆的处理性能，并 且需要硬件MMU实现的完整而强大的虚拟内存机制，还基本上会配有Java支持，有时 还要求一个安全程序执行环境。典型的产品包括高端手机和手持仪器，电子钱包以及金融事务处理机。 </li><li>款式R（ARMv7‐R）：硬实时且高性能的处理器。标的是高端实时市场。那些高级的玩意，像高档轿车的组件，大型发电机控制器，机器手臂控制器等，它们使用的处理 器不但要很好很强大，还要极其可靠，对事件的反应也要极其敏捷。 </li><li>款式M（ARMv7‐M）：认准了旧世代单片机的应用而量身定制。在这些应用中，尤其是 对于实时控制系统，低成本、低功耗、极速中断反应以及高处理效率，都是至关重要的。  Cortex系列是v7架构的第一次亮相，其中Cortex‐M3就是按款式M设计的。</li></ul><h1 id="第二章-ARM基础知识"><a href="#第二章-ARM基础知识" class="headerlink" title="第二章 ARM基础知识"></a>第二章 ARM基础知识</h1><h2 id="1-哈弗架构与冯诺伊曼架构"><a href="#1-哈弗架构与冯诺伊曼架构" class="headerlink" title="1.哈弗架构与冯诺伊曼架构"></a>1.<strong>哈弗架构与冯诺伊曼架构</strong></h2><p>CPU架构可以分为哈弗架构与冯诺伊曼架构，如下图所示。</p><ul><li><p><strong>哈弗架构</strong>中指令与数据分开存放，CPU可以同时读入指令、读写数据。</p><p><img src="/2023/10/21/ARM%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84/b.png"></p></li><li><p><strong>冯诺伊曼架构</strong>中指令、数据混合存放，CPU依次读取指令、读写数据，不可同时操作指令和数据。</p><p><img src="/2023/10/21/ARM%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84/c.png"></p></li></ul><blockquote><p>Cortex‐M3采用了哈佛结构，拥有独立的指令总线和数据总线，可以让取指与数据访问 并行不悖。</p></blockquote><h2 id="2-RISC与CISC"><a href="#2-RISC与CISC" class="headerlink" title="2. RISC与CISC"></a>2. RISC与CISC</h2><ul><li><strong>复杂指令集CISC</strong>:   以Intel、AMD的X86 CPU为代表，CISC也是要通过操作内存、寄存器、运算器来完成复杂指令的。它在实现时，是将复杂指令转换成了一个微程序，微程序在制造CPU时就已存储于微服务存储器。一个微程序包含若干条微指令（也称微码），执行复杂指令时，实际上是在执行一个微程序。这也带来两种指令集的一个差别，微程序的执行是不可被打断的，而RISC指令之间可以被打断，所以理论上RISC可更快响应中断。特点：</li><li><strong>精简指令集RISC</strong>：以ARM、IBM Power为代表，设计初衷针对CISC CPU复杂的弊端，选择一些可以在单个CPU周期完成的指令，以降低CPU的复杂度，将复杂性交给编译器</li></ul><blockquote><p><strong>ARM公司的芯片都使用RISC指令集，对内存只有load&#x2F;store操作，数据的处理是在CPU寄存器上进行。</strong></p></blockquote><ul><li>二者的比较：<ul><li>CISC的指令能力强，单多数指令使用率低却增加了CPU的复杂度，指令是可变长格式；</li><li>RISC的指令大部分为单周期指令，指令长度固定，操作寄存器，对于内存只有Load&#x2F;Store操作</li><li>CISC支持多种寻址方式；RISC支持的寻址方式</li><li>CISC通过微程序控制技术实现；</li><li>RISC增加了通用寄存器，硬布线逻辑控制为主，采用流水线</li><li>CISC的研制周期长</li><li>RISC优化编译，有效支持高级语言</li></ul></li></ul><h1 id="第三章-ARM-寄存器"><a href="#第三章-ARM-寄存器" class="headerlink" title="第三章 ARM 寄存器"></a>第三章 ARM 寄存器</h1><p>这里以Cortex‐M3 &#x2F;Cortex‐M4&#x2F;Cortex‐A7处理器为例，他们拥有 R0‐R15 的寄存器组。其中 R13 作为堆栈指针 SP。SP 有两个，但在同一 时刻只能有一个可以看到，这也就是所谓的“banked”寄存器。</p><p><img src="/2023/10/21/ARM%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84/image-20231021162714042.png" alt="image-20231021162714042"></p><ul><li>R0-R12：通用寄存器 ，R0‐R12 都是 32 位通用寄存器，用于数据操作。但是注意：绝大多数 16 位 Thumb 指令只能访 问 R0‐R7，而 32 位 Thumb‐2 指令可以访问所有寄存器。</li><li>Banked R13: 两个堆栈指针 <ul><li>主堆栈指针（MSP）：复位后缺省使用的堆栈指针，用于操作系统内核以及异常处理例程（包 括中断服务例程） </li><li>进程堆栈指针（PSP）：由用户的应用程序代码使用。</li></ul></li><li>R14：连接寄存器，当呼叫一个子程序时，由 R14 存储返回地址 </li><li>R15：程序计数寄存器 ，指向当前的程序地址。如果修改它的值，就能改变程序的执行流</li><li>特殊功能寄存器 <ul><li>程序状态字寄存器组（PSRs）  </li><li>中断屏蔽寄存器组（PRIMASK, FAULTMASK, BASEPRI）  </li><li>控制寄存器（CONTROL）</li></ul></li></ul><p><img src="/2023/10/21/ARM%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84/image-20231021163136833.png" alt="image-20231021163136833"></p><p>功能如下表：</p><p><img src="/2023/10/21/ARM%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84/image-20231021163233661.png" alt="image-20231021163233661"></p><h1 id="第四章-ARM汇编"><a href="#第四章-ARM汇编" class="headerlink" title="第四章 ARM汇编"></a>第四章 ARM汇编</h1><h2 id="1-ARM汇编概述"><a href="#1-ARM汇编概述" class="headerlink" title="1.ARM汇编概述"></a>1.ARM汇编概述</h2><p>①最初，ARM公司发布两类指令集：</p><ul><li><p><strong>Thumb指令集：</strong>这是16位的，每条指令占据16位，节省空间</p></li><li><p><strong>ARM指令集：</strong>这是32位的，每条指令占据32位，高效，但是太占空间</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MOV R1, #1;Thumb指令：len(mov) + len(r1) + len(立即数) = 16bit</span><br><span class="line">MOV R1, #1;ARM指令：len(mov) + len(r1) + len(立即数) = 32bit</span><br></pre></td></tr></table></figure></li></ul><p>要节省空间时用Thumb指令，要效率时用ARM指令</p><p>②一个CPU既可以运行Thumb指令，也能运行ARM指令。怎么区分当前指令是Thumb还是ARM指令呢？</p><p>​程序状态寄存器中有一位，名为“T”，它等于1时表示当前运行的是Thumb指令。</p><p>③假设函数A是使用Thumb指令写的，函数B是使用ARM指令写的，怎么调用A&#x2F;B？</p><p>​我们可以往PC寄存器里写入函数A或B的地址，就可以调用A或B，</p><p>④但是怎么让CPU在执行A函数是进入Thumb状态，在执行B函数时进入ARM状态？</p><p>​做个手脚：</p><p>​调用函数A时，让PC寄存器的BIT0等于1，即：PC&#x3D;函数A地址+(1&lt;&lt;0)；</p><p>​调用函数B时，让PC寄存器的BIT0等于0:，即：PC&#x3D;函数B地址</p><p>⑤但是这样做太麻烦，于是引入Thumb2指令集</p><ul><li><strong>Thumb2指令集：</strong>它支持16位指令、32位指令混合编程。</li></ul><h2 id="2-区分指令集"><a href="#2-区分指令集" class="headerlink" title="2.区分指令集"></a>2.区分指令集</h2><p>ARM公司推出了： Unified Assembly Language UAL，统一汇编语言，我们不需要去区分这些指令集</p><p>我们只需要在程序前面用CODE32&#x2F;CODE16&#x2F;THUMB表示指令集:ARM&#x2F;Thumb&#x2F;Thumb2</p><h2 id="3-汇编指令格式"><a href="#3-汇编指令格式" class="headerlink" title="3.汇编指令格式"></a>3.汇编指令格式</h2><blockquote><p>参考《DEN0013D_cortex_a_series_PG.pdf》P70</p><p>《ARM Cortex-M3与Cortex-M4权威指南.pdf》第5章汇编指令可以分为几大类：数据处理、内存访问、跳转、饱和运算、其他指令</p></blockquote><p>以“数据处理”指令为例，UAL汇编格式为：</p><p><img src="/2023/10/21/ARM%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84/image-20231021175310394.png" alt="image-20231021175310394"></p><ul><li><p>Operation表示各类汇编指令，比如ADD、MOV；</p></li><li><p>cond表示conditon，即该指令执行的条件；</p></li><li><p>S表示该指令执行后，会去修改程序状态寄存器；</p></li><li><p>Rd为目的寄存器，用来存储运算的结果；</p></li><li><p>Rn、Operand2是两个源操作数</p></li></ul><h2 id="4-常用汇编指令"><a href="#4-常用汇编指令" class="headerlink" title="4.常用汇编指令"></a>4.常用汇编指令</h2><h3 id="1-内存访问指令"><a href="#1-内存访问指令" class="headerlink" title="1.内存访问指令"></a>1.内存访问指令</h3><p>加载指令LDR：Load Register</p><p>读多个寄存器</p><p>存储指令STR：Store Register</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">LDR R0, =0X20000</span><br><span class="line">LDR R1, =0X1234</span><br><span class="line">STR R1,[R0]      ;将R1里面的值写入到R0指向的地址里</span><br><span class="line"></span><br><span class="line">LDMIA R0!, &#123; R4-R11 &#125;;lrmia: ldr mutiple inc after</span><br><span class="line">;ldr r0 [r4]   r0 = r0 + 4</span><br><span class="line">;ldr r0 [r5]   r0 = r0 + 4</span><br></pre></td></tr></table></figure><h3 id="2-数据处理指令"><a href="#2-数据处理指令" class="headerlink" title="2.数据处理指令"></a>2.数据处理指令</h3><p>加法指令ADD</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MOV R2,#1</span><br><span class="line">MOV R3,#2</span><br><span class="line">ADD R1,R2,R3;R1 = R2 + R3</span><br></pre></td></tr></table></figure><p>减法指令SUB</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MOV R2,#1</span><br><span class="line">MOV R3,#2</span><br><span class="line">ADD R1,R3,R2;R1 = R3 - R2</span><br></pre></td></tr></table></figure><p>位操作指令AND&#x2F;BIC&#x2F;ORR</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LDR R0, =0XFFFFFFFF</span><br><span class="line">AND R0,R0,#(1&lt;&lt;4);与：只保留第四位</span><br><span class="line">LDR R0, =0XFFFFFFFF</span><br><span class="line">BIC R0,R0,#(1&lt;&lt;4);位清除：清除第四位</span><br><span class="line">LDR R0, =0</span><br><span class="line">ORR R0,#(1&lt;&lt;2|1&lt;&lt;3);或：设置第2、3位为1</span><br></pre></td></tr></table></figure><p>比较指令CMP&#x2F;TST</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LDR R0, =0X12</span><br><span class="line">LDR R1, =0X12</span><br><span class="line">CMP R0,R1;比较R0-R1里面的结果，结果存放在程序装载寄存器</span><br><span class="line">MOVEQ R0, #2；如果相等，执行这条指令，R0=2</span><br><span class="line"></span><br><span class="line">TST R0,R1;测试R0&amp;R1的结果</span><br></pre></td></tr></table></figure><h3 id="3-跳转指令"><a href="#3-跳转指令" class="headerlink" title="3.跳转指令"></a>3.跳转指令</h3><ul><li><p>B：Branch，跳转</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">B Delay</span><br><span class="line">Delay</span><br><span class="line">MOV R0, #5</span><br><span class="line">Loop</span><br><span class="line">SUBS R0,R0,#1</span><br><span class="line">BNE Loop;不等于0就一直循环</span><br><span class="line">MOV PC, LR;结束，将LR值返回给PC</span><br></pre></td></tr></table></figure></li><li><p>BL：Branch with Link，跳转前先把返回地址保持在LR寄存器中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">BL Delay</span><br><span class="line">MOV R1, #1;执行完之后会直接跳转到这条指令 PC=LR+4</span><br><span class="line">Delay</span><br><span class="line">MOV R0, #5</span><br><span class="line">Loop</span><br><span class="line">SUBS R0,R0,#1</span><br><span class="line">BNE Loop;不等于0就一直循环</span><br><span class="line">MOV PC, LR;结束，将LR值返回给PC</span><br></pre></td></tr></table></figure></li><li><p>BX：Branch and eXchange，根据跳转地址的BIT0切换为ARM或Thumb状态(0：ARM状态，1：Thumb状态)</p></li><li><p>BLX：Branch with Link and eXchange ，根据跳转地址的BIT0切换为ARM或Thumb状态(0：ARM状态，1：Thumb状态)#</p></li></ul><h3 id="4-CPU操作指令"><a href="#4-CPU操作指令" class="headerlink" title="4.CPU操作指令"></a>4.CPU操作指令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">;开启CPU接收中断</span><br><span class="line">cpsie i</span><br><span class="line">cpsie f</span><br><span class="line"></span><br><span class="line">;存储器屏蔽指令:确保前面的指令和数据都处理完成</span><br><span class="line">dsb;数据同步屏蔽</span><br><span class="line">isb;指令同步屏蔽</span><br></pre></td></tr></table></figure><h1 id="五、异常与中断"><a href="#五、异常与中断" class="headerlink" title="五、异常与中断"></a>五、异常与中断</h1><h2 id="1-异常与中断的概念引入与处理流程"><a href="#1-异常与中断的概念引入与处理流程" class="headerlink" title="1.异常与中断的概念引入与处理流程"></a>1.异常与中断的概念引入与处理流程</h2><h3 id="1-1-使用生活实例引入中断"><a href="#1-1-使用生活实例引入中断" class="headerlink" title="1.1 使用生活实例引入中断"></a>1.1 使用生活实例引入中断</h3><p><img src="/2023/10/21/ARM%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84/001_mother_son.png"></p><p>假设有个大房间里面有小房间，婴儿正在睡觉，他的妈妈在外面看书。<br>问：这个母亲怎么才能知道这个小孩醒？</p><ol><li>过一会打开一次房门，看婴儿是否睡醒，然后接着看书</li><li>一直等到婴儿发出声音以后再过去查看，期间都在读书</li></ol><p>第一种方法叫做<strong>查询方式</strong>：</p><ul><li>优点：简单 </li><li>缺点： 累</li></ul><p>如何写程序？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="number">1</span> read <span class="title function_">book</span><span class="params">(读书)</span></span><br><span class="line">2 open <span class="title function_">door</span><span class="params">(开门)</span></span><br><span class="line">  <span class="title function_">if</span><span class="params">(小孩还在睡)</span></span><br><span class="line"> <span class="title function_">return</span><span class="params">(继续读书)</span></span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line"> 照顾小孩</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种方法叫<strong>中断方式</strong>：</p><ul><li>优点：不累</li><li>缺点：复杂</li></ul><p>如何写程序：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">read book</span><br><span class="line">&#125;</span><br><span class="line">中断服务程序() <span class="comment">//核心问题：如何被调用？</span></span><br><span class="line">&#123;</span><br><span class="line">处理照顾小孩</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-母亲如何处理中断"><a href="#1-2-母亲如何处理中断" class="headerlink" title="1.2 母亲如何处理中断"></a>1.2 母亲如何处理中断</h3><p>我们还是看看母亲被小孩哭声打断如何照顾小孩？</p><p>母亲的处理过程</p><ul><li>平时看书</li><li>发生了各种声音，如何处理这些声音<ul><li>有远处的猫叫（听而不闻，忽略）</li><li>门铃声有快递（开门收快递）</li><li>小孩哭声（打开房门，照顾小孩）</li></ul></li><li>母亲的处理<ul><li>只会处理门铃声和小孩哭声<ul><li>先在书中放入书签，合上书(保存现场)</li><li>去处理 (调用对应的中断服务程序)</li><li>继续看书(恢复现场)</li></ul></li></ul></li></ul><p>不同情况，不同处理</p><ul><li>对于门铃：开门取快件</li><li>对于哭声:照顾小孩</li></ul><h3 id="1-3-ARM系统中异常与中断处理流程"><a href="#1-3-ARM系统中异常与中断处理流程" class="headerlink" title="1.3 ARM系统中异常与中断处理流程"></a>1.3 ARM系统中异常与中断处理流程</h3><p>我们将母亲的处理过程抽象化：</p><ul><li>母亲的头脑相当于CPU<ul><li>耳朵听到声音会发送信号给脑袋</li><li>声音来源有很多种<ul><li>有远处的猫叫，门铃声，小孩哭声</li></ul></li><li>这些声音传入耳朵，再由耳朵传给大脑</li><li>除了这些可以中断母亲的看书，还有其他情况，比如：<ul><li>身体不舒服</li><li>有只蜘蛛掉下来</li><li>对于特殊情况无法回避，必须立即处理</li></ul></li></ul></li></ul><p>对于arm系统，异常与中断的硬件框图如下：</p><p><img src="/2023/10/21/ARM%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84/002_exception_on_arm.png"></p><p>所有的中断源(按键、定时器等)，它们发出的中断汇聚到<strong>中断控制器</strong>，<br>再由中断控制器发信号给CPU，告诉它发生了那些紧急情况。</p><p>除了这些中断，还有什么可以打断CPU的运行？</p><ul><li>指令不对</li><li>数据访问有问题</li><li>reset信号</li><li>等等，这些都可以打断断CPU，这些被称为<strong>异常</strong></li><li>中断属于一种异常</li></ul><p>ARM系统中如何处理异常与中断？重点在于<strong>保存现场</strong>以及<strong>恢复现场</strong>，<br>处理过程如下：</p><ul><li>保存现场(各种寄存器)</li><li>处理异常(中断属于一种异常)</li><li>恢复现场</li></ul><p>细化一下，在ARM系统中如何使用异常(中断)？</p><ul><li><p>初始化</p><ul><li>设置中断源，让它可以产生中断</li><li>设置中断控制器(可以屏蔽某个中断，优先级)</li><li>设置CPU总开关，使能中断</li></ul></li><li><p>执行其他程序：正常程序</p></li><li><p>产生中断，举例：按下按键—&gt;中断控制器—&gt;CPU</p></li><li><p>cpu每执行完一条指令都会检查有无中断&#x2F;异常产生</p></li><li><p>发现有中断&#x2F;异常产生，开始处理：</p><ul><li>保存现场</li><li>分辨异常&#x2F;中断，调用对于异常&#x2F;中断的处理函数</li><li>恢复现场</li></ul></li></ul><p>不同的芯片，不同的架构，在这方面的处理稍有差别：</p><ul><li><p>保存&#x2F;恢复现场：cortex M3&#x2F;M4是硬件实现的，cortex A7是软件实现的</p></li><li><p>CPU中止当前执行，跳转去执行处理异常的代码：也有差异</p><ul><li><p>cortex M3&#x2F;M4在向量表上放置的是函数地址</p></li><li><p>cortex A7在向量表上放置的是跳转指令</p></li></ul></li></ul><h2 id="2-ARM架构中异常与中断的处理"><a href="#2-ARM架构中异常与中断的处理" class="headerlink" title="2.ARM架构中异常与中断的处理"></a>2.ARM架构中异常与中断的处理</h2><h3 id="1-1-处理流程是一样的"><a href="#1-1-处理流程是一样的" class="headerlink" title="1.1 处理流程是一样的"></a>1.1 处理流程是一样的</h3><ul><li>每执行完一条指令都会检查有无中断&#x2F;异常产生</li><li>发现有中断&#x2F;异常产生，开始处理：<ul><li>保存现场</li><li>分辨异常&#x2F;中断，调用对应的异常&#x2F;中断处理函数</li><li>恢复现场</li></ul></li></ul><p>不同的芯片，不同的架构，在这方面的处理稍有差别：</p><ul><li><p>CPU中止当前执行，跳转去执行处理异常的代码：也有差异</p><ul><li>cortex M3&#x2F;M4在向量表上放置的是函数地址</li><li>cortex A7在向量表上放置的是跳转指令</li></ul></li><li><p>保存&#x2F;恢复现场：cortex M3&#x2F;M4是硬件实现的，cortex A7是软件实现的</p></li></ul><h3 id="1-2-cortex-M3-M4"><a href="#1-2-cortex-M3-M4" class="headerlink" title="1.2 cortex M3&#x2F;M4"></a>1.2 cortex M3&#x2F;M4</h3><p>参考资料：<code>DDI0403E_B_armv7m_arm.pdf</code>、<code>ARM Cortex-M3与Cortex-M4权威指南.pdf</code>、<code>PM0056.pdf</code></p><p>要想理解这个处理流程，需要从向量表说起。<br>向量，在数学定义里是<strong>有方向的量</strong>，在程序里可以认为向量就是一个数组，里面有多个项。<br>在ARM架构里，对于异常&#x2F;中断，它们的<strong>处理入口</strong>会整齐地排放在一起。</p><h4 id="1-2-1-M3-M4的向量表"><a href="#1-2-1-M3-M4的向量表" class="headerlink" title="1.2.1 M3&#x2F;M4的向量表"></a>1.2.1 M3&#x2F;M4的向量表</h4><p>M3&#x2F;M4的向量表中，放置的是具体异常&#x2F;中断的处理函数的地址。<br>比如发生<code>Reset</code>异常时，CPU就会从向量表里找到第1项，得到Reset_Handler函数的地址，跳转去执行。<br>比如发生<code>EXTI Line 0</code>中断时，CPU就会从向量表里找到第22项，得到EXTI0_IRQHandler函数的地址，跳转去执行。</p><ul><li>跳转之前，硬件会保存现场</li><li>函数执行完毕，返回之后，硬件会恢复现场</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">; Vector Table Mapped to Address 0 at Reset</span><br><span class="line">                AREA    RESET, DATA, READONLY</span><br><span class="line">                EXPORT  __Vectors</span><br><span class="line">                EXPORT  __Vectors_End</span><br><span class="line">                EXPORT  __Vectors_Size</span><br><span class="line"></span><br><span class="line">__Vectors       DCD     __initial_sp               ; Top of Stack</span><br><span class="line">                DCD     Reset_Handler              ; Reset Handler</span><br><span class="line">                DCD     NMI_Handler                ; NMI Handler</span><br><span class="line">                DCD     HardFault_Handler          ; Hard Fault Handler</span><br><span class="line">                DCD     MemManage_Handler          ; MPU Fault Handler</span><br><span class="line">                DCD     BusFault_Handler           ; Bus Fault Handler</span><br><span class="line">                DCD     UsageFault_Handler         ; Usage Fault Handler</span><br><span class="line">                DCD     0                          ; Reserved</span><br><span class="line">                DCD     0                          ; Reserved</span><br><span class="line">                DCD     0                          ; Reserved</span><br><span class="line">                DCD     0                          ; Reserved</span><br><span class="line">                DCD     SVC_Handler                ; SVCall Handler</span><br><span class="line">                DCD     DebugMon_Handler           ; Debug Monitor Handler</span><br><span class="line">                DCD     0                          ; Reserved</span><br><span class="line">                DCD     PendSV_Handler             ; PendSV Handler</span><br><span class="line">                DCD     SysTick_Handler            ; SysTick Handler</span><br><span class="line"></span><br><span class="line">                ; External Interrupts</span><br><span class="line">                DCD     WWDG_IRQHandler            ; Window Watchdog</span><br><span class="line">                DCD     PVD_IRQHandler             ; PVD through EXTI Line detect</span><br><span class="line">                DCD     TAMPER_IRQHandler          ; Tamper</span><br><span class="line">                DCD     RTC_IRQHandler             ; RTC</span><br><span class="line">                DCD     FLASH_IRQHandler           ; Flash</span><br><span class="line">                DCD     RCC_IRQHandler             ; RCC</span><br><span class="line">                DCD     EXTI0_IRQHandler           ; EXTI Line 0</span><br><span class="line">                DCD     EXTI1_IRQHandler           ; EXTI Line 1</span><br><span class="line">                DCD     EXTI2_IRQHandler           ; EXTI Line 2</span><br><span class="line">                DCD     EXTI3_IRQHandler           ; EXTI Line 3</span><br><span class="line">                DCD     EXTI4_IRQHandler           ; EXTI Line 4</span><br><span class="line">                DCD     DMA1_Channel1_IRQHandler   ; DMA1 Channel 1</span><br><span class="line">                DCD     DMA1_Channel2_IRQHandler   ; DMA1 Channel 2</span><br><span class="line">                DCD     DMA1_Channel3_IRQHandler   ; DMA1 Channel 3</span><br><span class="line">                DCD     DMA1_Channel4_IRQHandler   ; DMA1 Channel 4</span><br><span class="line">                DCD     DMA1_Channel5_IRQHandler   ; DMA1 Channel 5</span><br><span class="line">                DCD     DMA1_Channel6_IRQHandler   ; DMA1 Channel 6</span><br><span class="line">                DCD     DMA1_Channel7_IRQHandler   ; DMA1 Channel 7</span><br><span class="line">                DCD     ADC1_2_IRQHandler          ; ADC1 &amp; ADC2</span><br><span class="line">                DCD     USB_HP_CAN1_TX_IRQHandler  ; USB High Priority or CAN1 TX</span><br><span class="line">                DCD     USB_LP_CAN1_RX0_IRQHandler ; USB Low  Priority or CAN1 RX0</span><br><span class="line">                DCD     CAN1_RX1_IRQHandler        ; CAN1 RX1</span><br><span class="line">                DCD     CAN1_SCE_IRQHandler        ; CAN1 SCE</span><br><span class="line">                DCD     EXTI9_5_IRQHandler         ; EXTI Line 9..5</span><br><span class="line">                DCD     TIM1_BRK_IRQHandler        ; TIM1 Break</span><br><span class="line">                DCD     TIM1_UP_IRQHandler         ; TIM1 Update</span><br><span class="line">                DCD     TIM1_TRG_COM_IRQHandler    ; TIM1 Trigger and Commutation</span><br><span class="line">                DCD     TIM1_CC_IRQHandler         ; TIM1 Capture Compare</span><br><span class="line">                DCD     TIM2_IRQHandler            ; TIM2</span><br><span class="line">                DCD     TIM3_IRQHandler            ; TIM3</span><br><span class="line">                DCD     TIM4_IRQHandler            ; TIM4</span><br><span class="line">                DCD     I2C1_EV_IRQHandler         ; I2C1 Event</span><br><span class="line">                DCD     I2C1_ER_IRQHandler         ; I2C1 Error</span><br><span class="line">                DCD     I2C2_EV_IRQHandler         ; I2C2 Event</span><br><span class="line">                DCD     I2C2_ER_IRQHandler         ; I2C2 Error</span><br><span class="line">                DCD     SPI1_IRQHandler            ; SPI1</span><br><span class="line">                DCD     SPI2_IRQHandler            ; SPI2</span><br><span class="line">                DCD     USART1_IRQHandler          ; USART1</span><br><span class="line">                DCD     USART2_IRQHandler          ; USART2</span><br><span class="line">                DCD     USART3_IRQHandler          ; USART3</span><br><span class="line">                DCD     EXTI15_10_IRQHandler       ; EXTI Line 15..10</span><br><span class="line">                DCD     RTCAlarm_IRQHandler        ; RTC Alarm through EXTI Line</span><br><span class="line">                DCD     USBWakeUp_IRQHandler       ; USB Wakeup from suspend</span><br><span class="line">                DCD     TIM8_BRK_IRQHandler        ; TIM8 Break</span><br><span class="line">                DCD     TIM8_UP_IRQHandler         ; TIM8 Update</span><br><span class="line">                DCD     TIM8_TRG_COM_IRQHandler    ; TIM8 Trigger and Commutation</span><br><span class="line">                DCD     TIM8_CC_IRQHandler         ; TIM8 Capture Compare</span><br><span class="line">                DCD     ADC3_IRQHandler            ; ADC3</span><br><span class="line">                DCD     FSMC_IRQHandler            ; FSMC</span><br><span class="line">                DCD     SDIO_IRQHandler            ; SDIO</span><br><span class="line">                DCD     TIM5_IRQHandler            ; TIM5</span><br><span class="line">                DCD     SPI3_IRQHandler            ; SPI3</span><br><span class="line">                DCD     UART4_IRQHandler           ; UART4</span><br><span class="line">                DCD     UART5_IRQHandler           ; UART5</span><br><span class="line">                DCD     TIM6_IRQHandler            ; TIM6</span><br><span class="line">                DCD     TIM7_IRQHandler            ; TIM7</span><br><span class="line">                DCD     DMA2_Channel1_IRQHandler   ; DMA2 Channel1</span><br><span class="line">                DCD     DMA2_Channel2_IRQHandler   ; DMA2 Channel2</span><br><span class="line">                DCD     DMA2_Channel3_IRQHandler   ; DMA2 Channel3</span><br><span class="line">                DCD     DMA2_Channel4_5_IRQHandler ; DMA2 Channel4 &amp; Channel5</span><br><span class="line">__Vectors_End</span><br></pre></td></tr></table></figure><h4 id="1-2-2-M3-M4的异常-中断处理流程"><a href="#1-2-2-M3-M4的异常-中断处理流程" class="headerlink" title="1.2.2 M3&#x2F;M4的异常&#x2F;中断处理流程"></a>1.2.2 M3&#x2F;M4的异常&#x2F;中断处理流程</h4><p>发生异常&#x2F;中断时，硬件上实现了这些事情：</p><ul><li><p>保存现场：把被中断瞬间的寄存器的值保存进栈里</p></li><li><p>根据异常&#x2F;中断号，从向量表中得到<strong>函数地址</strong>，跳转过去执行</p></li><li><p>函数执行完后，从栈中恢复现场</p></li></ul><p>保存现场、分辨异常&#x2F;中断、跳转执行，都是硬件实现的。<br>我们只需要在向量表中，把处理函数的地址填进去就可以了。</p><p><strong>硬件</strong>承包了大部分的工作。</p><p>M3&#x2F;M4的向量表中，存放的是<strong>函数地址</strong>。</p><h3 id="1-3-cortex-A7"><a href="#1-3-cortex-A7" class="headerlink" title="1.3 cortex A7"></a>1.3 cortex A7</h3><p>参考资料：<code>ARM ArchitectureReference Manual ARMv7-A and ARMv7-R edition.pdf</code></p><p>实际上，以前的S3C2440属于ARM9处理器，它的异常&#x2F;中断处理流程给cortex A7是一样的。</p><h4 id="1-3-1-A7的向量表"><a href="#1-3-1-A7的向量表" class="headerlink" title="1.3.1 A7的向量表"></a>1.3.1 A7的向量表</h4><p>A7的向量表中，放置的是某类异常的<strong>跳转指令</strong>。<br>比如发生<code>Reset</code>异常时，CPU就会从向量表里找到第0项，得到<code>b reset</code>指令，执行后就跳转到reset函数。<br>比如发生任何的中断时，CPU就会从向量表里找到第6项，得到<code>ldrpc, _irq</code>指令，执行后就跳转到_irq函数。</p><ul><li>跳转之前，硬件只会保存CPSR寄存器</li><li>跳转之后，软件要保存现场</li><li>函数执行完毕，返回之前，软件恢复现场</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">_start: </span><br><span class="line">    breset</span><br><span class="line">ldrpc, _undefined_instruction</span><br><span class="line">ldrpc, _software_interrupt</span><br><span class="line">ldrpc, _prefetch_abort</span><br><span class="line">ldrpc, _data_abort</span><br><span class="line">ldrpc, _not_used</span><br><span class="line">ldrpc, _irq</span><br><span class="line">ldrpc, _fiq</span><br></pre></td></tr></table></figure><h4 id="1-3-2-A7的异常-中断处理流程"><a href="#1-3-2-A7的异常-中断处理流程" class="headerlink" title="1.3.2 A7的异常&#x2F;中断处理流程"></a>1.3.2 A7的异常&#x2F;中断处理流程</h4><p>发生异常&#x2F;中断时，硬件上实现了这些事情：</p><ul><li><p>CPU切换到对应的异常模式，比如IRQ模式、未定义模式、SVC模式</p></li><li><p>保存被中断时的CPSR到SPSR</p><ul><li>CPSR：current program status register，当前程序状态寄存器</li><li>SRSR：saved program status register，保存的程序状态寄存器</li></ul></li><li><p>跳到这个异常的入口地址去，执行<strong>指令</strong>，这通常是一条跳转指令</p></li></ul><p>软件要做的事情就比较多了：</p><ul><li>保存现场</li><li>分辨异常&#x2F;中断</li><li>调用对应的处理函数</li><li>恢复现场</li></ul><p>A7的向量表中，存放的是<strong>跳转指令</strong>。</p><h2 id="3-异常处理深入分析-保存现场"><a href="#3-异常处理深入分析-保存现场" class="headerlink" title="3.异常处理深入分析_保存现场"></a>3.异常处理深入分析_保存现场</h2><h3 id="1-1-回顾一下处理流程"><a href="#1-1-回顾一下处理流程" class="headerlink" title="1.1 回顾一下处理流程"></a>1.1 回顾一下处理流程</h3><p>CPU每执行完一条指令都会检查有无中断&#x2F;异常产生，发现有中断&#x2F;异常产生，开始处理：</p><ul><li>保存现场</li><li>分辨异常&#x2F;中断，调用对应的异常&#x2F;中断处理函数</li><li>恢复现场</li></ul><p>对于不用的处理器，具体的处理工作有差别：</p><ul><li>保存现场：cortex M3&#x2F;M4里是硬件完成，cortex A7等是软件实现</li><li>分辨异常&#x2F;中断：cortex M3&#x2F;M4里是硬件完成，cortex A7等是软件实现</li><li>调用处理函数：cortex M3&#x2F;M4里是硬件来调用，cortex A7等是软件自己去调用</li><li>恢复现场：cortex M3&#x2F;M4里是软件触发、硬件实现，cortex A7等是软件实现</li></ul><p>不管是硬件还是软件实现，第一步都是<strong>保存现场</strong>。</p><h3 id="1-2-为什么要保存现场"><a href="#1-2-为什么要保存现场" class="headerlink" title="1.2 为什么要保存现场"></a>1.2 为什么要保存现场</h3><p><img src="/2023/10/21/ARM%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84/008_save_register.png"></p><p>任何程序，最终都会转换为机器码，上述C代码可以转换为右边的汇编指令。<br>对于这4条指令，它们可能随时被异常打断，怎么保证异常处理完后，被打断的程序还能正确运行？</p><ul><li><p>这4条指令涉及R0、R1寄存器，程序被打断时、恢复运行时，R0、R1要保持不变</p></li><li><p>执行完第3条指令时，比较结果保存在<strong>程序状态寄存器</strong>里，程序被打断时、恢复运行时，程序状态寄存器保持不变</p></li><li><p>这4条指令，读取a、b内存，程序被打断时、恢复运行时，a、b内存保持不变</p></li></ul><p>内存保持不变，这很容易实现，程序不越界就可以。<br>所以，关键在于R0、R1、程序状态寄存器要保持不变(当然不止这些寄存器)：</p><ul><li>在处理异常前，把这些寄存器保存在栈中，这称为<strong>保存现场</strong></li><li>在处理完异常后，从栈中恢复这些寄存器，这称为<strong>恢复现场</strong></li></ul><h3 id="1-3-保存现场"><a href="#1-3-保存现场" class="headerlink" title="1.3 保存现场"></a>1.3 保存现场</h3><p>ARM处理器中有这些寄存器：<br><img src="/2023/10/21/ARM%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84/003_cpu_register.png"></p><p>在arm中有个ATPCS规则(ARM-THUMB procedure call standard（ARM-Thumb过程调用标准）。<br>约定R0-R15寄存器的用途：</p><ul><li><p>R0-R3</p><p>调用者和被调用者之间传参数</p></li><li><p>R4-R11</p><p>函数可能被使用，所以在函数的入口保存它们，在函数的出口恢复它们。</p></li></ul><p><img src="/2023/10/21/ARM%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84/004_atpcs.png"></p><p>还有一个<strong>程序状态寄存器</strong>，对于M3&#x2F;M4它被称为<strong>XPSR</strong>，对于A7它被称为<strong>CPSR</strong>，我们简称为PSR。<br>R0-R15、PSR，就是所谓的<strong>现场</strong>。<br>发生异常&#x2F;中断后，在处理异常&#x2F;中断前，需要<strong>保存现场</strong>，难道需要保存所有这些寄存器吗？<br>不需要！<br>在C函数中，可以修改R0-R3、R12、R14(LR)以及PSR。如果C函数要用到这些寄存器，就要把它们保存到栈里，在函数结束前在从栈中恢复它们。<br>这些寄存器被拆分成2部分：**调用者保存的寄存器(R0-R3,R12,LR,PSR)<strong>、</strong>被调用者保存的寄存器(R4-R11)**。<br>比如函数A调用函数B，函数A应该知道：</p><ul><li>R0-R3是用来传参数给函数B的</li><li>函数B可以肆意修改R0-R3</li><li>函数A不要指望函数B帮你保存R0-R3</li><li>保存R0-R3，是函数A的事情</li><li>对于LR、PSR也是同样的道理，保存它们是函数A的责任</li></ul><p>对于函数B：</p><ul><li>我用到R4-R11中的某一个，我都会在函数入口保存、在函数返回前恢复</li><li>保证在B函数调用前后，函数A看到的R4-R11保存不变</li></ul><p>假设函数B就是异常&#x2F;中断处理函数，函数B本身能保证R4-R11不变，那么保存现场时，只需要保存这些：</p><ul><li>调用者保存的寄存器(R0-R3,R12,LR,PSR)</li><li>PC</li></ul><h3 id="1-4-对于M3-M4"><a href="#1-4-对于M3-M4" class="headerlink" title="1.4 对于M3&#x2F;M4"></a>1.4 对于M3&#x2F;M4</h3><p>参考资料：<code>DDI0403E_B_armv7m_arm.pdf</code>、<code>ARM Cortex-M3与Cortex-M4权威指南.pdf</code>、<code>PM0056.pdf</code></p><h4 id="1-4-1-硬件保存现场"><a href="#1-4-1-硬件保存现场" class="headerlink" title="1.4.1 硬件保存现场"></a>1.4.1 硬件保存现场</h4><p><img src="/2023/10/21/ARM%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84/005_saved_register_for_exception.png"></p><h4 id="1-4-2-然后调用C函数"><a href="#1-4-2-然后调用C函数" class="headerlink" title="1.4.2 然后调用C函数"></a>1.4.2 然后调用C函数</h4><p>C函数执行完后，它返回LR所指示的位置。<br>难道把LR设置为被中断的程序的地址就行了吗？<br>如果只是返回LR所指示的地方，硬件帮我们保存在栈里的寄存器，怎么恢复？<br>M3&#x2F;M4在调用异常处理函数前，把LR设置为一个特殊的值，转给特殊的值被称为<strong>EXC_RETURN</strong>。<br>当PC寄存器的值等于<strong>EXC_RETURN</strong>时，会触发异常返回机制，简单地说：会从栈里恢复R0-R3,R12,LR,PC,PSR等寄存器。<br><strong>EXC_RETURN</strong>的值，请参考<code>ARM Cortex-M3与Cortex-M4权威指南.pdf</code>，截图如下：<br><img src="/2023/10/21/ARM%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84/006_exc_return.png"></p><p>补充2个知识点：</p><ul><li><p>操作模式：M3&#x2F;M4有两个操作模式</p><ul><li>处理模式：执行中断服务程序等异常处理时，处于<strong>处理模式</strong></li><li>线程模式：执行普通应用程序代码时，处于<strong>线程模式</strong></li></ul></li><li><p>M3&#x2F;M4有连个SP寄存器：SP_process、SP_main</p><ul><li>有些RTOS在运行用户程序时会使用SP_process，默认使用SP_main。</li></ul></li></ul><h3 id="1-5-对于A7"><a href="#1-5-对于A7" class="headerlink" title="1.5 对于A7"></a>1.5 对于A7</h3><p>它寄存器如下：<br><img src="/2023/10/21/ARM%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84/007_bank_register.png"></p><p>处理器有9中模式：User、Sys、FIQ、IRQ、ABT、SVC、UND、MON、HYP。<br>上图中深色的寄存器，表示该模式下的”Banked”寄存器，比如SPSR寄存器，在很多模式下都有自己的、单独的寄存器。<br>比如IRQ模式下访问SPSR时，访问到的是IRQ模式下自己的SPSR_irq，别的模式下无法访问SPSR_irq。</p><p>比较值得关注的是FIQ模式，名为”快中断”，它有很多”Banked”寄存器：R8-R12,SP,LR。<br>在FIQ模式下，它既然能使用自己的R8-R12,SP,LR，自然不需要去保存被中断的程序的”R8-R12,SP,LR”了。<br>省去保存这几个寄存器的时间，处理中断时自然就快很多，所以被称为”FIQ”。</p><p>从上图也看到，几乎每个模式下都有自己是SP寄存器，意味着这些模式下有自己的栈。</p><p>当发生异常时，以IRQ为例：</p><ul><li>CPU会自动切换进入对应的模式，比如进入IRQ模式</li><li>并且会把被中断是的CPSR保存到SPSR_irq里</li></ul><p>所以发生异常&#x2F;中断时，在保存现场时，只需要保存：</p><ul><li>调用者保存的寄存器(R0-R3,R12,LR)</li><li>PC</li></ul><h2 id="4-实战-未定义指令异常"><a href="#4-实战-未定义指令异常" class="headerlink" title="4.实战_未定义指令异常"></a>4.实战_未定义指令异常</h2><p>参考资料：<code>ARM Cortex-M3与Cortex-M4权威指南.pdf</code>、<code>DDI0403E_B_armv7m_arm.pdf</code>、<code>PM0056.pdf</code></p><h3 id="1-1-M3-M4支持哪些异常"><a href="#1-1-M3-M4支持哪些异常" class="headerlink" title="1.1 M3_M4支持哪些异常"></a>1.1 M3_M4支持哪些异常</h3><p>从向量表可以看出，M3&#x2F;M4支持哪些异常：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">__Vectors       DCD     __initial_sp               ; Top of Stack</span><br><span class="line">                DCD     Reset_Handler              ; Reset Handler</span><br><span class="line">                DCD     NMI_Handler                ; NMI Handler</span><br><span class="line">                DCD     HardFault_Handler          ; Hard Fault Handler</span><br><span class="line">                DCD     MemManage_Handler          ; MPU Fault Handler</span><br><span class="line">                DCD     BusFault_Handler           ; Bus Fault Handler</span><br><span class="line">                DCD     UsageFault_Handler         ; Usage Fault Handler</span><br><span class="line">                DCD     0                          ; Reserved</span><br><span class="line">                DCD     0                          ; Reserved</span><br><span class="line">                DCD     0                          ; Reserved</span><br><span class="line">                DCD     0                          ; Reserved</span><br><span class="line">                DCD     SVC_Handler                ; SVCall Handler</span><br><span class="line">                DCD     DebugMon_Handler           ; Debug Monitor Handler</span><br><span class="line">                DCD     0                          ; Reserved</span><br><span class="line">                DCD     PendSV_Handler             ; PendSV Handler</span><br><span class="line">                DCD     SysTick_Handler            ; SysTick Handler</span><br><span class="line">                </span><br><span class="line">                ; External Interrupts</span><br><span class="line">                DCD     WWDG_IRQHandler            ; Window Watchdog</span><br><span class="line">                DCD     PVD_IRQHandler             ; PVD through EXTI Line detect   </span><br></pre></td></tr></table></figure><p>前面几个对应各类错误：</p><ul><li>Hard Fault</li><li>MPU Fault</li><li>Bus Fault</li><li>Usage Fault</li></ul><p>这几类错误产生的原因入下图所示，这个图来自<code>ARM Cortex-M3与Cortex-M4权威指南.pdf</code>:<br><img src="/2023/10/21/ARM%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84/009_m3m4_fault.png"></p><p>以未定义指令为例，它属于”处理器操作相关的错误”，如果没有使能”Usage Fault”，发就会触发”Hard Fault”。</p><h3 id="1-2-什么是未定义指令？"><a href="#1-2-什么是未定义指令？" class="headerlink" title="1.2 什么是未定义指令？"></a>1.2 什么是未定义指令？</h3><p>未定义指令，即使”还没有定义的指令”，也就是CPU不认识的指令。<br>很多时候，我们故意在代码里插入一些伪造的指令，故意让CPU执行到它时触发错误。<br>这在调试时很有用，比如想打断点：怎么实现呢？<br>有很多种方法：硬件监视点(watch point，数量有限)、软件断点(数量无限)。<br>软件断点就是使用<code>未定义指令</code>来实现的，比如想让程序执行到某个地址A时停下来，可以这样做：</p><ul><li>地址A上原来的指令是<code>xxx</code></li><li>我们故意把它改成<code>yyy</code>，改成一条CPU无法识别的指令</li><li>当CPU执行到地址A上的<code>yyy</code>指令时，触发异常</li><li>在异常处理函数里，打印更多调试信息</li><li>调试完毕后，恢复地址A上的指令为<code>xxx</code></li><li>从地址A重新执行程序</li></ul><p>本节教程并不打算制作调试器，这里只是讲述一下未定义指令的作用，使用它来深入理解异常处理流程。</p><h3 id="1-3-在汇编代码里插入未定义指令"><a href="#1-3-在汇编代码里插入未定义指令" class="headerlink" title="1.3 在汇编代码里插入未定义指令"></a>1.3 在汇编代码里插入未定义指令</h3><p>在代码中插入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DCD  0xffffffff；在main函数之前插入</span><br><span class="line">LDR PC,=mymain;绝对跳转</span><br></pre></td></tr></table></figure><h4 id="1-3-1-先不使能”HardFault”、”Usage-Fault”"><a href="#1-3-1-先不使能”HardFault”、”Usage-Fault”" class="headerlink" title="1.3.1 先不使能”HardFault”、”Usage Fault”"></a>1.3.1 先不使能”HardFault”、”Usage Fault”</h4><p> 结果：不会进入main函数</p><h4 id="1-3-2-使能”HardFault”"><a href="#1-3-2-使能”HardFault”" class="headerlink" title="1.3.2 使能”HardFault”"></a>1.3.2 使能”HardFault”</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">__VectorsDCD(0X20000000+0X10000);设置栈大小</span><br><span class="line">DCDReset_Handler;Reset_Handler 伪指令,一般用于为特定的数据分配存储单元，同时可完成已分配存储单元的初始化</span><br><span class="line">DCD     0                   ; NMI Handler</span><br><span class="line">                DCD     HardFault_Handler          ; Hard Fault Handler</span><br><span class="line">                </span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">HardFault_Handler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;HardFault!\r\n&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：只打印异常处理函数HardFault_Handler（）里面实现的 <strong>HardFault!</strong></p><h4 id="1-3-3-使能”Usage-Fault”"><a href="#1-3-3-使能”Usage-Fault”" class="headerlink" title="1.3.3 使能”Usage Fault”"></a>1.3.3 使能”Usage Fault”</h4><ul><li><p>设置SCB寄存器的第18位，才能使能Usage Fault</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">__VectorsDCD(0X20000000+0X10000);设置栈大小</span><br><span class="line">DCDReset_Handler;Reset_Handler 伪指令,一般用于为特定的数据分配存储单元，同时可完成已分配存储单元的初始化</span><br><span class="line">DCD     0                ; NMI Handler</span><br><span class="line">                DCD     HardFault_Handler          ; Hard Fault Handler</span><br><span class="line">                DCD     0          ; MPU Fault Handler</span><br><span class="line">                DCD     0           ; Bus Fault Handler</span><br><span class="line">                DCD     UsageFault_Handler         ; Usage Fault Handler</span><br></pre></td></tr></table></figure></li><li><p>初始化UsageFault，实现对应的异常处理函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">UsageFaultInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">SCB_Type * SCB = (SCB_Type *)SCB_BASE_ADDR;</span><br><span class="line">SCB-&gt;SHCSR |= (SCB_SHCSR_USGFAULTENA_Msk);  <span class="comment">//UsageFault Enable</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">UsageFault_Handler</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> * <span class="built_in">stack</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">SCB_Type * SCB = (SCB_Type *)SCB_BASE_ADDR;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;UsageFault!\r\n&quot;</span>);</span><br><span class="line">SCB-&gt;CFSR = SCB-&gt;CFSR;    <span class="comment">//1.清除标志位，否则会一直触发</span></span><br><span class="line"><span class="built_in">stack</span>[<span class="number">6</span>] += <span class="number">4</span>;  <span class="comment">//2.设置返回地址，指向下一条指令,否则返回之后又会执行这条指令，还是会一直触发</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：打印异常处理函数UsageFault_Handler（）里面实现的 <strong>UsageFault!<strong>之后，紧接着</strong>进去main函数中去</strong></p></li></ul><h2 id="5-实战-SVC异常"><a href="#5-实战-SVC异常" class="headerlink" title="5.实战_SVC异常"></a>5.实战_SVC异常</h2><p>参考资料：<code>ARM Cortex-M3与Cortex-M4权威指南.pdf</code>、<code>DDI0403E_B_armv7m_arm.pdf</code>、<code>PM0056.pdf</code></p><h3 id="1-1-M3-M4支持哪些异常-1"><a href="#1-1-M3-M4支持哪些异常-1" class="headerlink" title="1.1 M3_M4支持哪些异常"></a>1.1 M3_M4支持哪些异常</h3><p>从向量表可以看出，M3&#x2F;M4支持哪些异常：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">__Vectors       DCD     __initial_sp               ; Top of Stack</span><br><span class="line">                DCD     Reset_Handler              ; Reset Handler</span><br><span class="line">                DCD     NMI_Handler                ; NMI Handler</span><br><span class="line">                DCD     HardFault_Handler          ; Hard Fault Handler</span><br><span class="line">                DCD     MemManage_Handler          ; MPU Fault Handler</span><br><span class="line">                DCD     BusFault_Handler           ; Bus Fault Handler</span><br><span class="line">                DCD     UsageFault_Handler         ; Usage Fault Handler</span><br><span class="line">                DCD     0                          ; Reserved</span><br><span class="line">                DCD     0                          ; Reserved</span><br><span class="line">                DCD     0                          ; Reserved</span><br><span class="line">                DCD     0                          ; Reserved</span><br><span class="line">                DCD     SVC_Handler                ; SVCall Handler</span><br><span class="line">                DCD     DebugMon_Handler           ; Debug Monitor Handler</span><br><span class="line">                DCD     0                          ; Reserved</span><br><span class="line">                DCD     PendSV_Handler             ; PendSV Handler</span><br><span class="line">                DCD     SysTick_Handler            ; SysTick Handler</span><br><span class="line">                </span><br><span class="line">                ; External Interrupts</span><br><span class="line">                DCD     WWDG_IRQHandler            ; Window Watchdog</span><br><span class="line">                DCD     PVD_IRQHandler             ; PVD through EXTI Line detect   </span><br></pre></td></tr></table></figure><p>在上述代码中，可以看到<code>SVC_Handler</code>，它对应SVC异常，当执行<code>SVC</code>指令时，会导致<code>SVC_Handler</code>被调用。</p><h3 id="1-2-什么是SVC指令？"><a href="#1-2-什么是SVC指令？" class="headerlink" title="1.2 什么是SVC指令？"></a>1.2 什么是SVC指令？</h3><p>在ARM指令中，有一条指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SVC #VAL</span><br></pre></td></tr></table></figure><p>它会触发一个异常。<br>在操作系统中，比如各类RTOS或者Linux，都会使用<code>SVC</code>指令故意触发异常，从而导致内核的异常处理函数被调用，进而去使用内核的服务。<br>比如Linux中，各类文件操作的函数<code>open</code>、<code>read</code>、<code>write</code>，它的实质都是<code>SVC</code>指令。<br>本节课程不讲解<code>SVC</code>在内核中的使用，我们只是看看如何处理<code>SVC</code>触发的异常。</p><h3 id="1-3-在汇编代码里插入SVC指令"><a href="#1-3-在汇编代码里插入SVC指令" class="headerlink" title="1.3 在汇编代码里插入SVC指令"></a>1.3 在汇编代码里插入SVC指令</h3><p>在代码中插入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SVC #1</span><br></pre></td></tr></table></figure><p>看看会发生什么事情。</p><p> 结果：只打印异常处理函数HardFault_Handler（）里面实现的 <strong>HardFault!</strong></p><h4 id="1-3-1-提供SVC异常处理函数"><a href="#1-3-1-提供SVC异常处理函数" class="headerlink" title="1.3.1 提供SVC异常处理函数"></a>1.3.1 提供SVC异常处理函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">SVC_Handler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;SVC!\r\n&quot;</span>);  <span class="comment">//执行完这条指令，会自动执行下一条指令</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：只打印异常处理函数SVC_Handler（）里面实现的 <strong>HardFault!<strong>之后，紧接着</strong>进去main函数中去</strong></p><h2 id="6-实战-SysTick异常"><a href="#6-实战-SysTick异常" class="headerlink" title="6.实战_SysTick异常"></a>6.实战_SysTick异常</h2><p>使用CPU自带的SysTick定时器，让它产生周期性的中断，用来操作LED。</p><p>参考资料：<code>ARM Cortex-M3与Cortex-M4权威指南.pdf</code>、<code>PM0056.pdf</code></p><h3 id="1-1-M3-M4支持哪些异常-2"><a href="#1-1-M3-M4支持哪些异常-2" class="headerlink" title="1.1 M3_M4支持哪些异常"></a>1.1 M3_M4支持哪些异常</h3><p>从向量表可以看出，M3&#x2F;M4支持哪些异常：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">__Vectors       DCD     __initial_sp               ; Top of Stack</span><br><span class="line">                DCD     Reset_Handler              ; Reset Handler</span><br><span class="line">                DCD     NMI_Handler                ; NMI Handler</span><br><span class="line">                DCD     HardFault_Handler          ; Hard Fault Handler</span><br><span class="line">                DCD     MemManage_Handler          ; MPU Fault Handler</span><br><span class="line">                DCD     BusFault_Handler           ; Bus Fault Handler</span><br><span class="line">                DCD     UsageFault_Handler         ; Usage Fault Handler</span><br><span class="line">                DCD     0                          ; Reserved</span><br><span class="line">                DCD     0                          ; Reserved</span><br><span class="line">                DCD     0                          ; Reserved</span><br><span class="line">                DCD     0                          ; Reserved</span><br><span class="line">                DCD     SVC_Handler                ; SVCall Handler</span><br><span class="line">                DCD     DebugMon_Handler           ; Debug Monitor Handler</span><br><span class="line">                DCD     0                          ; Reserved</span><br><span class="line">                DCD     PendSV_Handler             ; PendSV Handler</span><br><span class="line">                DCD     SysTick_Handler            ; SysTick Handler</span><br><span class="line">                </span><br><span class="line">                ; External Interrupts</span><br><span class="line">                DCD     WWDG_IRQHandler            ; Window Watchdog</span><br><span class="line">                DCD     PVD_IRQHandler             ; PVD through EXTI Line detect   </span><br></pre></td></tr></table></figure><h3 id="1-2-SysTick操作"><a href="#1-2-SysTick操作" class="headerlink" title="1.2 SysTick操作"></a>1.2 SysTick操作</h3><p>Cortex-M处理器内部集成了一个小型的、名为SysTick的定时器。可以使用它来为操作系统提供系统时钟，也可以把它当做一般的定时器。<br>之所以在处理器内增加这样的定时器，是为了提高软件的可以移植性。<br>它是一个24位的定时器，向下计数。<br>在时钟源的驱动下，计数值到达0时，可以触发异常。<br>它的框图如下：<br><img src="/2023/10/21/ARM%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84/010_systick.png"></p><p>在本程序中，只需要设置这几个寄存器：</p><h4 id="1-2-1-SysTick-CTRL"><a href="#1-2-1-SysTick-CTRL" class="headerlink" title="1.2.1 SysTick-&gt;CTRL"></a>1.2.1 SysTick-&gt;CTRL</h4><p>  <img src="/2023/10/21/ARM%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84/011_stk_ctrl.png"></p><h4 id="1-2-2-SysTick-VAL"><a href="#1-2-2-SysTick-VAL" class="headerlink" title="1.2.2 SysTick-&gt;VAL"></a>1.2.2 SysTick-&gt;VAL</h4><p><img src="/2023/10/21/ARM%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84/012_stk_val.png"></p><h4 id="1-2-3-SysTick-LOAD"><a href="#1-2-3-SysTick-LOAD" class="headerlink" title="1.2.3 SysTick-&gt;LOAD"></a>1.2.3 SysTick-&gt;LOAD</h4><p><img src="/2023/10/21/ARM%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84/013_stk_load.png"></p><h3 id="1-3-清除SysTick异常"><a href="#1-3-清除SysTick异常" class="headerlink" title="1.3 清除SysTick异常"></a>1.3 清除SysTick异常</h3><p><img src="/2023/10/21/ARM%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84/014_clear_systick_pending.png"></p><h1 id="第六章-操作模式和特权等级"><a href="#第六章-操作模式和特权等级" class="headerlink" title="第六章 操作模式和特权等级"></a>第六章 操作模式和特权等级</h1><h2 id="1-CPU模式和状态以及栈寄存器"><a href="#1-CPU模式和状态以及栈寄存器" class="headerlink" title="1.CPU模式和状态以及栈寄存器"></a>1.CPU模式和状态以及栈寄存器</h2><h3 id="1-模式和状态"><a href="#1-模式和状态" class="headerlink" title="1. 模式和状态"></a>1. 模式和状态</h3><h4 id="1-1-状态"><a href="#1-1-状态" class="headerlink" title="1.1 状态"></a>1.1 状态</h4><p>ARM芯片支持Thumb指令集、ARM指令集，处理器运行Thumb指令时处于Thumb状态，运行ARM指令时处于ARM状态。</p><p>CortexM3&#x2F;M4只支持Thumb指令集，所以处理器运行时只有Thumb状态。除此之外，还有一个调试状态：比如通过调试器或触发断点后，处理器就会进入调试状态并停止指令执行。</p><p>本课程不涉及调试状态，所以处理器只处于Thumb状态。</p><h4 id="1-2-模式-访问等级-栈"><a href="#1-2-模式-访问等级-栈" class="headerlink" title="1.2 模式&#x2F;访问等级&#x2F;栈"></a>1.2 模式&#x2F;访问等级&#x2F;栈</h4><p>CortexM3&#x2F;M4处理器有两种模式：</p><ul><li>处理模式：执行中断服务程序等异常处理，在处理模式下，处理器有最大权限(具有特权访问等级)</li><li>线程模式：执行普通程序。这是处理器可以处于特权访问等级，也可以处于非特权访问等级。</li></ul><p>不同模式下，处理权限可能不同，最大的不同就是：栈寄存器可能也不同。</p><p>ARM处理器的通用寄存器有R0、R1、……、R15，其中的R13也被称为SP，即栈寄存器。对于SP，它有两个实体：MSP(Main SP)、PSP(Process SP)。</p><p>在处理模式下，使用MSP，也就是说指令中使用SP时，它对应的物理寄存器是MSP。</p><p>在线程模式下，根据CONTROL寄存器的设置，处理器可能用的是MSP，也可能用的是PSP。</p><p>图示如下：</p><p><img src="/2023/10/21/ARM%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84/06_spsel.png" alt="image-20220326170811105"></p><p>栈寄存器的选择：</p><ul><li>① 启动时，CONTROL寄存器的SPSEL等于0，默认使用MSP。注意：启动时是线程模式，使用的仍然是MSP</li><li>② 程序可以修改CONTROL寄存器让SPSEL等于1，以使用PSP</li><li>③ 发生异常时，异常处理函数中使用的必定是MSP</li><li>④ 异常返回时，可以控制返回之后使用MSP还是PSP</li></ul><p>所谓访问等级，有两种：</p><ul><li>特权访问等级：可以访问所有寄存器、所有存储器。</li><li>非特权访问等级：无法访问某些寄存器，比如无法访问NVIC寄存器(嵌套向量中断控制器)。</li></ul><p>在一般的单片机系统中，RTOS、各类应用之间是无法隔离的：某个应用程序崩溃了，整个系统也就崩溃了。如果能让RTOS、各类应用程序彼此之间隔离开，那么可以增强系统的健壮性。这需要硬件的支持，比如需要有MPU(Memory Protection Unit)。</p><p>没有MPU时，访问等级的用处不大，只能用来限制应用程序无法访问某些寄存器。</p><h4 id="1-3-转换图"><a href="#1-3-转换图" class="headerlink" title="1.3 转换图"></a>1.3 转换图</h4><p>处理器状态和模式转换图如下：</p><p><img src="/2023/10/21/ARM%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84/04_mode_status.png" alt="image-20220326164725625"></p><p>注意：</p><ul><li>① 上电启动时，处理处于线程模式，处于特权访问等级</li><li>② 在特权模式下，它自然可以设置某些寄存器降低自己的等级，进入非特权访问等级</li><li>③ 在非特权模式下，无法自行提升自己的等级</li><li>④ 发生异常时，处理器进入处理模式</li><li>⑤ 在处理模式下永远都是特权访问等级</li><li>⑥ 异常放回时，可以返回到特权访问等级，也可以返回到非特权访问等级</li></ul><h4 id="1-4-CONTROL寄存器"><a href="#1-4-CONTROL寄存器" class="headerlink" title="1.4 CONTROL寄存器"></a>1.4 CONTROL寄存器</h4><p>上图中，第②那里，怎么从特权访问等级降级为非特权访问等级？通过设置CONTROL寄存器。</p><p>CONTROL寄存器定义如下：</p><ul><li>SPSEL：用来选择线程模式使用的是MSP还是PSP</li><li>nPRIV：用来设置线程模式的访问等级(特权&#x2F;非特权)</li></ul><p><img src="/2023/10/21/ARM%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84/07_control_reg.png" alt="image-20220326171250026"></p><p><img src="/2023/10/21/ARM%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84/08_control_reg_bits.png" alt="image-20220326171338515"></p><p>两种等级、两种栈，组合起来就有4种情况：</p><p><img src="/2023/10/21/ARM%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84/13_control_bit_table.png" alt="image-20220326162610884"></p><p>怎么读写CONTROL寄存器？使用如下汇编指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MRS r0, CONTROL  ; 将CONTROL寄存器的值读入R0</span><br><span class="line">MSR CONTROL, r0  ; 将R0写入CONTROL寄存器</span><br></pre></td></tr></table></figure><p><img src="/2023/10/21/ARM%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84/10_process_mode_switch.png" alt="image-20220326180056270"></p><h4 id="1-5-EXC-RETURN"><a href="#1-5-EXC-RETURN" class="headerlink" title="1.5 EXC_RETURN"></a>1.5 EXC_RETURN</h4><p>通过设置CONTROL寄存器，可以选择MSP或PSP，可以把特权访问等级降为非特权访问等级。</p><p>但是无法把非特权等级提升为特权访问等级，为什么？如果可以这样简单地提升等级的话，等级也就失去了意义。</p><p>线程模式下无法自行提升等级，只能借助异常处理来提升等级：</p><ul><li>在异常的处理函数中，LR等于一个特殊的值EXC_RETURN</li><li>EXC_RETURN决定里异常返回后，处理器处于什么模式、使用什么栈</li></ul><p><img src="/2023/10/21/ARM%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84/09_exc_return.png" alt="image-20220326174011909"></p><h3 id="2-编程"><a href="#2-编程" class="headerlink" title="2. 编程"></a>2. 编程</h3><p>调试本节程序时，在Keil自带的模拟器上调试，这样更容易看清楚。</p><p>工程需要如下设置：</p><p><img src="/2023/10/21/ARM%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84/01_use_emulator.png" alt="image-20220326183856624"></p><h2 id="2-提升访问等级"><a href="#2-提升访问等级" class="headerlink" title="2.提升访问等级"></a>2.提升访问等级</h2><h3 id><a href="#" class="headerlink" title></a></h3><h2 id="3-MSP和PSP"><a href="#3-MSP和PSP" class="headerlink" title="3.MSP和PSP"></a>3.MSP和PSP</h2>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ARM </tag>
            
            <tag> 汇编 </tag>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown语法基础教程</title>
      <link href="/2023/10/19/Markdown%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/"/>
      <url>/2023/10/19/Markdown%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="1、标题"><a href="#1、标题" class="headerlink" title="1、标题"></a>1、标题</h1><p>快捷键：</p><ul><li>一级标题：ctrl+1</li><li>二级标题：ctrl+2</li><li>三级标题：ctrl+3</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br></pre></td></tr></table></figure><h1 id="2、加黑"><a href="#2、加黑" class="headerlink" title="2、加黑"></a>2、加黑</h1><p>快捷键：ctrl+B</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**加黑**</span><br></pre></td></tr></table></figure><h1 id="3、高亮"><a href="#3、高亮" class="headerlink" title="3、高亮"></a>3、高亮</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">==高亮==</span><br></pre></td></tr></table></figure><h1 id="4、输入代码"><a href="#4、输入代码" class="headerlink" title="4、输入代码"></a>4、输入代码</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">​```markdown </span><br></pre></td></tr></table></figure><h1 id="5、图片选项"><a href="#5、图片选项" class="headerlink" title="5、图片选项"></a>5、图片选项</h1><ul><li>点击左上角“文件”</li><li>进入“偏好设置”</li><li>点击图像，选择复制图像到当前文件夹</li><li>勾选下面的前三个选项</li></ul><h1 id="6、实心黑点（实心圆圈和空心圆）"><a href="#6、实心黑点（实心圆圈和空心圆）" class="headerlink" title="6、实心黑点（实心圆圈和空心圆）"></a>6、实心黑点（实心圆圈和空心圆）</h1><ul><li>先按shift+tab，让光标回到行首</li><li>按下一个减号（-），然后再按一个空格即可</li><li><strong>空心圆：</strong>在按下适应黑点后，再按一个tab键即可</li></ul><h1 id="7、更改字体大小和样式"><a href="#7、更改字体大小和样式" class="headerlink" title="7、更改字体大小和样式"></a>7、更改字体大小和样式</h1><ul><li><strong>字体大小</strong>：偏好设置里面自定义设置</li><li><strong>字体样式</strong>：打开主题文件夹。我们需要打开 .css文件更改里面的内容才可以！<strong>可以使用 notepad++编辑！</strong></li></ul><h1 id="8、小条状标题：-加空格"><a href="#8、小条状标题：-加空格" class="headerlink" title="8、小条状标题：&gt; 加空格"></a>8、小条状标题：&gt; 加空格</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt; </span><br></pre></td></tr></table></figure><ul><li>打开<strong>github.css</strong>文件</li><li>找到blockquote，修改solid的值即可</li></ul><h1 id="9、图片"><a href="#9、图片" class="headerlink" title="9、图片"></a>9、图片</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 本地图片</span><br><span class="line">&lt;img src=&quot;/assets/pusheencode.webp&quot; alt=&quot;示例图片&quot; style=&quot;zoom:50%;&quot; /&gt;  #无法使用</span><br><span class="line">![](图片名)</span><br><span class="line"># 在线图片</span><br><span class="line">![code](https://cdn.jsdelivr.net/gh/fomalhaut1998/markdown_pic/img/code.png)</span><br><span class="line">#hexo插入图片的方法</span><br><span class="line">&#123;% asset_path slug %&#125;</span><br><span class="line">&#123;% asset_img slug [title] %&#125;</span><br><span class="line">&#123;% asset_link slug [title] %&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
